<!DOCTYPE html>
<html>
<head>

<title>Kirby</title>

<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="description" content="Kirby is a super simple, designy PHP toolkit" />
<meta name="keywords" content="php, toolkit, jquery, simple, design" />
<meta name="author" content="Bastian Allgeier" />
<meta http-equiv="imagetoolbar" content="no" />

<link rel="shortcut icon" href="/favicon.ico" />

<link rel="stylesheet" href="/css/styles.css" media="all" type="text/css" />

</head>

<body>

<div id="page">

  <div id="menu">
  
    <ul>
            <li><a href="/home.htm">kirby</a></li>
            <li><a class="active" href="/docs.htm">docs</a></li>
            <li><a href="/download">download</a></li>
            <li><a href="/plugins.htm">plugins</a></li>
          </ul>
  
  </div>
  
  <div id="content" class="docs">
  <h1>Documentation</h1>


<ul id="docsmenu">
    <li><a class="active" href="/docs/array.htm">array</a></li>
      <li><a href="/docs/browser.htm">browser</a></li>
      <li><a href="/docs/config.htm">config</a></li>
      <li><a href="/docs/content.htm">content</a></li>
      <li><a href="/docs/cookie.htm">cookie</a></li>
      <li><a href="/docs/core.htm">core</a></li>
      <li><a href="/docs/database.htm">database</a></li>
      <li><a href="/docs/dir.htm">dir</a></li>
      <li><a href="/docs/file.htm">file</a></li>
      <li><a href="/docs/globals.htm">globals</a></li>
      <li><a href="/docs/helper.htm">helper</a></li>
      <li><a href="/docs/language.htm">language</a></li>
      <li><a href="/docs/request.htm">request</a></li>
      <li><a href="/docs/server.htm">server</a></li>
      <li><a href="/docs/session.htm">session</a></li>
      <li><a href="/docs/size.htm">size</a></li>
      <li><a href="/docs/string.htm">string</a></li>
      <li><a href="/docs/url.htm">url</a></li>
      <li><a href="/docs/validation.htm">validation</a></li>
      <li><a href="/docs/xml.htm">xml</a></li>
  </ul>

<div id="documentation">
<h2>STR (String)</h2>

<p>The str class gives you a lot of helpful little tools to handle common tasks on strings.</p>

<h3>Function: str::html</h3>

<p>Returns the given string as valid html</p>

<h4>Syntax</h4>

<pre><code>str::html('string'[, 'keep_html']);
</code></pre>

<h4>Arguments</h4>

<ol>
<li>string - (string) the string</li>
<li>keep_html - (boolean) true: any html tags in the string won't be touched false: everything is converted to html</li>
</ol>

<h4>Returns</h4>

<ul>
<li>(string) nice and clean html</li>
</ul>

<h4>Example</h4>

<pre><code>echo str::html('some &lt;em&gt;über crazy&lt;/em&gt; stuff');
// output: some &lt;em&gt;&amp;uuml;ber crazy&lt;/em&gt; stuff

echo str::html('some &lt;em&gt;über crazy&lt;/em&gt; stuff', false);    
// output: some &amp;lt;em&amp;gt;&amp;uuml;ber crazy&amp;lt;/em&amp;gt; stuff
</code></pre>

<hr />

<h3>Function: str::unhtml</h3>

<p>Strip all html tags from a string</p>

<h4>Syntax</h4>

<pre><code>str::unhtml('html');
</code></pre>

<h4>Arguments</h4>

<ol>
<li>html - (string) the html</li>
</ol>

<h4>Returns</h4>

<ul>
<li>(string) nice and clean string without html tags</li>
</ul>

<h4>Example</h4>

<pre><code>echo str::unhtml('some &lt;em&gt;crazy&lt;/em&gt; stuff');
// output: some uber crazy stuff
</code></pre>

<hr />

<h3>Function: str::xml</h3>

<p>Returns the given string as valid xml</p>

<h4>Syntax</h4>

<pre><code>str::xml('string');
</code></pre>

<h4>Arguments</h4>

<ol>
<li>string - (string) the string</li>
</ol>

<h4>Returns</h4>

<ul>
<li>(string) nice and clean xml</li>
</ul>

<h4>Example</h4>

<pre><code>echo str::xml('some über crazy stuff');
// output: some &amp;#252;ber crazy stuff
</code></pre>

<hr />

<h3>Function: str::unxml</h3>

<p>Strips all the xml hocuspocus from the string</p>

<h4>Syntax</h4>

<pre><code>str::unxml('string');
</code></pre>

<h4>Arguments</h4>

<ol>
<li>string - (string) the string</li>
</ol>

<h4>Returns</h4>

<ul>
<li>(string) nice and clean string without xml</li>
</ul>

<h4>Example</h4>

<pre><code>echo str::unxml('some &lt;em&gt;&amp;#252;ber&lt;/em&gt; crazy stuff');
// output: some &amp;uuml;ber crazy stuff
</code></pre>

<hr />

<h3>Function: str::parse</h3>

<p>This is the most awesome function. It parses a string
with different modes.</p>

<h4>Syntax</h4>

<pre><code>str::parse('string'[, 'mode']);
</code></pre>

<h4>Arguments</h4>

<ol>
<li>string - (string) the string</li>
<li>mode - (string) Can be either json, xml, php, url or query</li>
</ol>

<h4>Returns</h4>

<ul>
<li>(string) returns the parsed string</li>
</ul>

<h4>Example</h4>

<pre><code>str::parse('{"test":"cool","super":"genious"}');
// output: array(
//  'test' =&gt; 'cool',
//  'super' =&gt; 'genious'
// );

str::parse('&lt;xml&gt;&lt;entries&gt;&lt;cool&gt;nice&lt;/cool&gt;&lt;/entries&gt;&lt;/xml&gt;', 'xml');
// output: array(
//    'entries' =&gt; array(
//        'cool' =&gt; 'nice'
//    )
// );
</code></pre>

<hr />

<h3>Function: str::email</h3>

<p>Encode an email and build a nice html tag for it</p>

<h4>Syntax</h4>

<pre><code>str::email('email'[, 'text']);
</code></pre>

<h4>Arguments</h4>

<ol>
<li>email - (string) the email address</li>
<li>text - (string) the text, which should be linked instead of the email</li>
</ol>

<h4>Returns</h4>

<ul>
<li>(string) returns the html tag</li>
</ul>

<h4>Example</h4>

<pre><code>echo str::email('mail@bastian-allgeier.de');
// output: &lt;a title="&amp;#109;&amp;#97;&amp;#x69;&amp;#108;&amp;#x40;&amp;#x62;&amp;#97;&amp;#x73;&amp;#x74;&amp;#x69;&amp;#97;&amp;#110;&amp;#45;&amp;#97;&amp;#x6c;&amp;#108;&amp;#103;&amp;#101;&amp;#x69;&amp;#x65;&amp;#x72;&amp;#46;&amp;#x64;&amp;#101;" class="email" href="mailto:&amp;#109;&amp;#97;&amp;#x69;&amp;#108;&amp;#x40;&amp;#x62;&amp;#97;&amp;#x73;&amp;#x74;&amp;#x69;&amp;#97;&amp;#110;&amp;#45;&amp;#97;&amp;#x6c;&amp;#108;&amp;#103;&amp;#101;&amp;#x69;&amp;#x65;&amp;#x72;&amp;#46;&amp;#x64;&amp;#101;"&gt;&amp;#109;&amp;#x61;&amp;#105;&amp;#x6c;&amp;#64;&amp;#x62;&amp;#97;&amp;#115;&amp;#116;&amp;#x69;&amp;#x61;&amp;#110;&amp;#45;&amp;#97;&amp;#x6c;&amp;#108;&amp;#x67;&amp;#101;&amp;#105;&amp;#x65;&amp;#114;&amp;#46;&amp;#100;&amp;#x65;&lt;/a&gt;
// unencoded: &lt;a title="mail@bastian-allgeier.de" class="email" href="mailto:mail@bastian-allgeier.de"&gt;mail@bastian-allgeier.de&lt;/a&gt;

echo str::email('mail@bastian-allgeier.de', 'mail me');
// output: &lt;a title="&amp;#109;&amp;#x61;&amp;#105;&amp;#108;&amp;#64;&amp;#x62;&amp;#x61;&amp;#115;&amp;#x74;&amp;#105;&amp;#x61;&amp;#x6e;&amp;#x2d;&amp;#x61;&amp;#108;&amp;#108;&amp;#103;&amp;#x65;&amp;#x69;&amp;#x65;&amp;#114;&amp;#x2e;&amp;#100;&amp;#101;" class="email" href="mailto:&amp;#109;&amp;#x61;&amp;#105;&amp;#108;&amp;#64;&amp;#x62;&amp;#x61;&amp;#115;&amp;#x74;&amp;#105;&amp;#x61;&amp;#x6e;&amp;#x2d;&amp;#x61;&amp;#108;&amp;#108;&amp;#103;&amp;#x65;&amp;#x69;&amp;#x65;&amp;#114;&amp;#x2e;&amp;#100;&amp;#101;"&gt;&amp;#x6d;&amp;#97;&amp;#x69;&amp;#108;&amp;#x20;&amp;#109;&amp;#101;&lt;/a&gt;
// unencoded: &lt;a title="mail@bastian-allgeier.de" class="email" href="mailto:mail@bastian-allgeier.de"&gt;mail me&lt;/a&gt;
</code></pre>

<hr />

<h3>Function: str::short</h3>

<p>Shorten a string</p>

<h4>Syntax</h4>

<pre><code>str::short('string', 'length'[, 'rep'])
</code></pre>

<h4>Arguments</h4>

<ol>
<li>string - (string) the looooong string</li>
<li>length - (int) the number of chars it should finally have</li>
<li>rep - (string) the replacement character - default: …</li>
</ol>

<h4>Returns</h4>

<ul>
<li>(string) returns the shortened string</li>
</ul>

<h4>Example</h4>

<pre><code>echo str::short('This is a very, very, very long string', 10);
// output: This is a…

echo str::short('This is a very, very, very long string', 10, '####');
// output: This i####
</code></pre>

<hr />

<h3>Function: str::shorturl</h3>

<p>Special function to shorten urls</p>

<h4>Syntax</h4>

<pre><code>str::shorturl('url', 'length'[, 'rep'])
</code></pre>

<h4>Arguments</h4>

<ol>
<li>url - (string) the looooong url</li>
<li>length - (int) the number of chars it should finally have</li>
<li>rep - (string) the replacement character - default: …</li>
</ol>

<h4>Returns</h4>

<ul>
<li>(string) returns the shortened url</li>
</ul>

<h4>Example</h4>

<pre><code>echo str::shorturl('http://veryveryverylongurl.com', 30);
// output: veryveryverylongurl.com
</code></pre>

<hr />

<h3>...and much, much more</h3>

<p>Please stay tuned for the full documentation for the other str functions.<br />
(they should be pretty self explainatory in the meanwhile)</p>

<pre><code>// shorten a string by cutting out characters in the middle test...bla.txt
str::cutout('string', 20);    

// add a correct apostroph to the string
str::apostrophe('name');    

// help to create plural or singlar forms
str::plural(20, 'entries', 'entry');    

// utf-8 able substring function
str::substr('string', 0, 20);    

// set all letters in lowercase
str::lower('string');    

// set all letters in uppercase
str::upper('string');    

// determine the string length (utf8 compatible)
str::length('string');    

// check if the searchword is contained in the string
str::contains('string', 'searchword');    

// create a random string
str::random(10);    

// sanitize a string to be used in an url
str::urlify('string');    

// split and clean a string
str::split('string', ':');    

// trim all unneeded whitespaces in a string
str::trim('string');    

// clean a string by multiple methods
str::sanitize('string', 'plain');    

// set all first letters in uppercase
str::ucwords('string');    

// set the first character in uppercase
str::ucfirst('string');    

// make sure the string is utf8
str::utf8('string');    

// custom stripslashes function
str::stripslashes('string');    
</code></pre>
</div>  </div>

  <div id="footer">
    &copy; 2010 – <a href="http://bastian-allgeier.de">Bastian Allgeier</a>
    <ul>
      <li><a href="http://twitter.com/getkirby">Follow Kirby on Twitter</a></li>
    </ul>
  </div>

</div>

<script type="text/javascript" src="/js/mootools.js"></script>
<script type="text/javascript" src="/lighter/Lighter.js"></script>
<script type="text/javascript" src="/lighter/Fuel.js"></script>
<script type="text/javascript" src="/js/scripts.js"></script>

<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
try {
var pageTracker = _gat._getTracker("UA-431401-11");
pageTracker._trackPageview();
} catch(err) {}</script>

</body>

</html>
