<!DOCTYPE html>
<!-- saved from url=(0031)http://getkirby.com/docs/config -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<title>Kirby</title>


<meta name="description" content="Kirby is a super simple, designy PHP toolkit">
<meta name="keywords" content="php, toolkit, jquery, simple, design">
<meta name="author" content="Bastian Allgeier">
<meta http-equiv="imagetoolbar" content="no">

<link rel="shortcut icon" href="http://getkirby.com/favicon.ico">

<link rel="stylesheet" href="./config_files/styles.css" media="all" type="text/css">

<link rel="stylesheet" type="text/css" media="screen" href="./config_files/Flame.twilight.css"><script src="./config_files/Fuel.php.js" type="text/javascript"></script></head>

<body>

<div id="page">

  <div id="menu">
  
    <ul>
            <li><a href="http://getkirby.com/home">kirby</a></li>
            <li><a class="active" href="http://getkirby.com/docs">docs</a></li>
            <li><a href="http://getkirby.com/download">download</a></li>
            <li><a href="http://getkirby.com/plugins">plugins</a></li>
          </ul>
  
  </div>
  
  <div id="content" class="docs">
  <h1>Documentation</h1>


<ul id="docsmenu">
    <li><a href="http://getkirby.com/docs/array">array</a></li>
      <li><a href="http://getkirby.com/docs/browser">browser</a></li>
      <li><a class="active" href="./config_files/config.htm">config</a></li>
      <li><a href="http://getkirby.com/docs/content">content</a></li>
      <li><a href="http://getkirby.com/docs/cookie">cookie</a></li>
      <li><a href="http://getkirby.com/docs/core">core</a></li>
      <li><a href="http://getkirby.com/docs/database">database</a></li>
      <li><a href="http://getkirby.com/docs/dir">dir</a></li>
      <li><a href="http://getkirby.com/docs/file">file</a></li>
      <li><a href="http://getkirby.com/docs/globals">globals</a></li>
      <li><a href="http://getkirby.com/docs/helper">helper</a></li>
      <li><a href="http://getkirby.com/docs/language">language</a></li>
      <li><a href="http://getkirby.com/docs/request">request</a></li>
      <li><a href="http://getkirby.com/docs/server">server</a></li>
      <li><a href="http://getkirby.com/docs/session">session</a></li>
      <li><a href="http://getkirby.com/docs/size">size</a></li>
      <li><a href="http://getkirby.com/docs/string">string</a></li>
      <li><a href="http://getkirby.com/docs/url">url</a></li>
      <li><a href="http://getkirby.com/docs/validation">validation</a></li>
      <li><a href="http://getkirby.com/docs/xml">xml</a></li>
  </ul>

<div id="documentation">
<h2>C (Config)</h2>

<p>The c class helps you to setup some static params for your app and get them back later.
It is used throughout Kirby as well.</p>

<h3>Function: c::set</h3>

<p>Set a new config variable</p>

<h4>Syntax</h4>

<pre><code style="display: none; ">c::set('key'[, 'value']);
</code><pre class="twilightLighter"><span class="kw4">c</span>::<span class="me1">set</span><span class="br0">(</span><span class="st0">'key'</span><span class="br0">[</span>, <span class="st0">'value'</span><span class="br0">]</span><span class="br0">)</span>;</pre></pre>

<h4>Arguments</h4>

<ol>
<li>key - (mixed) either the key or an array with multiple key/value pairs</li>
<li>value - (mixed) can be pretty much anything</li>
</ol>

<h4>Example</h4>

<pre><code style="display: none; ">c::set('db.host', 'localhost');
// sets the hostname for the database for example

c::set('title', 'The Title of your App');
// you can store all the values here you will need later somewhere

c::set(array(
    'key1' =&gt; 'val1',
    'key2' =&gt; 'val2',
    'key3' =&gt; 'val3'
));
// setting multiple variables at once
</code><pre class="twilightLighter"><span class="kw4">c</span>::<span class="me1">set</span><span class="br0">(</span><span class="st0">'db.host'</span>, <span class="st0">'localhost'</span><span class="br0">)</span>;<span class="co1">
// sets the hostname for the database for example</span>

<span class="kw4">c</span>::<span class="me1">set</span><span class="br0">(</span><span class="st0">'title'</span>, <span class="st0">'The Title of your App'</span><span class="br0">)</span>;<span class="co1">
// you can store all the values here you will need later somewhere</span>

<span class="kw4">c</span>::<span class="me1">set</span><span class="br0">(</span><span class="me1">array</span><span class="br0">(</span>
    <span class="st0">'key1'</span> =&gt; <span class="st0">'val1'</span>,
    <span class="st0">'key2'</span> =&gt; <span class="st0">'val2'</span>,
    <span class="st0">'key3'</span> =&gt; <span class="st0">'val3'</span>
<span class="br0">)</span><span class="br0">)</span>;<span class="co1">
// setting multiple variables at once</span></pre></pre>

<hr>

<h3>Function: c::get</h3>

<p>Get back a value you've stored earlier.</p>

<h4>Syntax</h4>

<pre><code style="display: none; ">c::get('key'[, 'default']);
</code><pre class="twilightLighter"><span class="kw4">c</span>::<span class="me1">get</span><span class="br0">(</span><span class="st0">'key'</span><span class="br0">[</span>, <span class="st0">'default'</span><span class="br0">]</span><span class="br0">)</span>;</pre></pre>

<h4>Arguments</h4>

<ol>
<li>key - (string) the key where you've stored the value</li>
<li>default - (mixed) can be pretty much anything to return when the key has not been found</li>
</ol>

<h4>Example</h4>

<pre><code style="display: none; ">c::get('db.host', 'localhost');
// get the hostname for the database and take the localhost if it's not defined.

echo c::get('title');
// sample output: 'The Title of your App'
</code><pre class="twilightLighter"><span class="kw4">c</span>::<span class="me1">get</span><span class="br0">(</span><span class="st0">'db.host'</span>, <span class="st0">'localhost'</span><span class="br0">)</span>;<span class="co1">
// get the hostname for the database and take the localhost if it's not defined.</span>

<span class="kw1">echo</span> <span class="kw4">c</span>::<span class="me1">get</span><span class="br0">(</span><span class="st0">'title'</span><span class="br0">)</span>;<span class="co1">
// sample output: 'The Title of your App'</span></pre></pre>

<hr>

<h3>Function: c::load</h3>

<p>Load a config file</p>

<h4>Syntax</h4>

<pre><code style="display: none; ">c::load('file');
</code><pre class="twilightLighter"><span class="kw4">c</span>::<span class="me1">load</span><span class="br0">(</span><span class="st0">'file'</span><span class="br0">)</span>;</pre></pre>

<h4>Arguments</h4>

<ol>
<li>file - (string) The path to the config file</li>
</ol>

<h4>Note</h4>

<p>You can load as many files as you want. Configurations will be merged into a single configuration array.</p>

<h4>Example</h4>

<pre><code style="display: none; ">$config = c::load('config.php');
// loads an external config file and returns the whole configuration array
</code><pre class="twilightLighter"><span class="kw3">$config</span> = <span class="kw4">c</span>::<span class="me1">load</span><span class="br0">(</span><span class="st0">'config.php'</span><span class="br0">)</span>;<span class="co1">
// loads an external config file and returns the whole configuration array</span></pre></pre>
</div>  </div>

  <div id="footer">
    © 2010 –&nbsp;<a href="http://bastian-allgeier.de/">Bastian Allgeier</a>
    <ul>
      <li><a href="http://twitter.com/getkirby">Follow Kirby on Twitter</a></li>
    </ul>
  </div>

</div>

<script type="text/javascript" src="./config_files/mootools.js"></script>
<script type="text/javascript" src="./config_files/Lighter.js"></script>
<script type="text/javascript" src="./config_files/Fuel.js"></script>
<script type="text/javascript" src="./config_files/scripts.js"></script>

<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script><script src="./config_files/ga.js" type="text/javascript"></script>
<script type="text/javascript">
try {
var pageTracker = _gat._getTracker("UA-431401-11");
pageTracker._trackPageview();
} catch(err) {}</script>




</body></html>