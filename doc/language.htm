<!DOCTYPE html>
<!-- saved from url=(0033)http://getkirby.com/docs/language -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<title>Kirby</title>


<meta name="description" content="Kirby is a super simple, designy PHP toolkit">
<meta name="keywords" content="php, toolkit, jquery, simple, design">
<meta name="author" content="Bastian Allgeier">
<meta http-equiv="imagetoolbar" content="no">

<link rel="shortcut icon" href="http://getkirby.com/favicon.ico">

<link rel="stylesheet" href="./language_files/styles.css" media="all" type="text/css">

<link rel="stylesheet" type="text/css" media="screen" href="./language_files/Flame.twilight.css"><script src="./language_files/Fuel.php.js" type="text/javascript"></script></head>

<body>

<div id="page">

  <div id="menu">
  
    <ul>
            <li><a href="http://getkirby.com/home">kirby</a></li>
            <li><a class="active" href="http://getkirby.com/docs">docs</a></li>
            <li><a href="http://getkirby.com/download">download</a></li>
            <li><a href="http://getkirby.com/plugins">plugins</a></li>
          </ul>
  
  </div>
  
  <div id="content" class="docs">
  <h1>Documentation</h1>


<ul id="docsmenu">
    <li><a href="http://getkirby.com/docs/array">array</a></li>
      <li><a href="http://getkirby.com/docs/browser">browser</a></li>
      <li><a href="http://getkirby.com/docs/config">config</a></li>
      <li><a href="http://getkirby.com/docs/content">content</a></li>
      <li><a href="http://getkirby.com/docs/cookie">cookie</a></li>
      <li><a href="http://getkirby.com/docs/core">core</a></li>
      <li><a href="http://getkirby.com/docs/database">database</a></li>
      <li><a href="http://getkirby.com/docs/dir">dir</a></li>
      <li><a href="http://getkirby.com/docs/file">file</a></li>
      <li><a href="http://getkirby.com/docs/globals">globals</a></li>
      <li><a href="http://getkirby.com/docs/helper">helper</a></li>
      <li><a class="active" href="./language_files/language.htm">language</a></li>
      <li><a href="http://getkirby.com/docs/request">request</a></li>
      <li><a href="http://getkirby.com/docs/server">server</a></li>
      <li><a href="http://getkirby.com/docs/session">session</a></li>
      <li><a href="http://getkirby.com/docs/size">size</a></li>
      <li><a href="http://getkirby.com/docs/string">string</a></li>
      <li><a href="http://getkirby.com/docs/url">url</a></li>
      <li><a href="http://getkirby.com/docs/validation">validation</a></li>
      <li><a href="http://getkirby.com/docs/xml">xml</a></li>
  </ul>

<div id="documentation">
<h2>L (Language)</h2>

<p>The language class helps to make multi-language support easier.</p>

<h3>Function: l::set</h3>

<p>Set a new language variable</p>

<h4>Syntax</h4>

<pre><code style="display: none; ">l::set('key'[, 'value']);
</code><pre class="twilightLighter"><span class="kw4">l</span>::<span class="me1">set</span><span class="br0">(</span><span class="st0">'key'</span><span class="br0">[</span>, <span class="st0">'value'</span><span class="br0">]</span><span class="br0">)</span>;</pre></pre>

<h4>Arguments</h4>

<ol>
<li>key - (mixed) either the key or an array with multiple key/value pairs</li>
<li>value - (mixed) can be pretty much anything</li>
</ol>

<h4>Example</h4>

<pre><code style="display: none; ">// in the german translation file
l::set('yes', 'Ja');

// in the english translation file    
l::set('yes', 'yes');

// set multiple values at once
l::set(array(
    'yes' =&gt; 'Ja',
    'no'  =&gt; 'Nein'
));
</code><pre class="twilightLighter"><span class="co1">// in the german translation file</span>
<span class="kw4">l</span>::<span class="me1">set</span><span class="br0">(</span><span class="st0">'yes'</span>, <span class="st0">'Ja'</span><span class="br0">)</span>;
<span class="co1">
// in the english translation file    </span>
<span class="kw4">l</span>::<span class="me1">set</span><span class="br0">(</span><span class="st0">'yes'</span>, <span class="st0">'yes'</span><span class="br0">)</span>;
<span class="co1">
// set multiple values at once</span>
<span class="kw4">l</span>::<span class="me1">set</span><span class="br0">(</span><span class="me1">array</span><span class="br0">(</span>
    <span class="st0">'yes'</span> =&gt; <span class="st0">'Ja'</span>,
    <span class="st0">'no'</span>  =&gt; <span class="st0">'Nein'</span>
<span class="br0">)</span><span class="br0">)</span>;</pre></pre>

<hr>

<h3>Function: l::get</h3>

<p>Get back a value you've stored earlier.</p>

<h4>Syntax</h4>

<pre><code style="display: none; ">l::get(['key'[, 'default']]);
</code><pre class="twilightLighter"><span class="kw4">l</span>::<span class="me1">get</span><span class="br0">(</span><span class="br0">[</span><span class="st0">'key'</span><span class="br0">[</span>, <span class="st0">'default'</span><span class="br0">]</span><span class="br0">]</span><span class="br0">)</span>;</pre></pre>

<h4>Arguments</h4>

<ol>
<li>key - (string) the key where you've stored the value. if empty the whole language array is returned</li>
<li>default - (mixed) can be pretty much anything to return when the key has not been found</li>
</ol>

<h4>Returns</h4>

<ul>
<li>(mixed)</li>
</ul>

<h4>Example</h4>

<pre><code style="display: none; ">// for german users
echo l::get('yes');
// output: Ja

// for english users
echo l::get('yes');
// output: yes

a::show( l::get() );
// returns the whole language array     
</code><pre class="twilightLighter"><span class="co1">// for german users</span>
<span class="kw1">echo</span> <span class="kw4">l</span>::<span class="me1">get</span><span class="br0">(</span><span class="st0">'yes'</span><span class="br0">)</span>;<span class="co1">
// output: Ja</span>
<span class="co1">
// for english users</span>
<span class="kw1">echo</span> <span class="kw4">l</span>::<span class="me1">get</span><span class="br0">(</span><span class="st0">'yes'</span><span class="br0">)</span>;<span class="co1">
// output: yes</span>

<span class="kw4">a</span>::<span class="me1">show</span><span class="br0">(</span> <span class="kw4">l</span>::<span class="me1">get</span><span class="br0">(</span><span class="br0">)</span> <span class="br0">)</span>;<span class="co1">
// returns the whole language array     </span></pre></pre>

<hr>

<h3>Function: l::current</h3>

<p>Get the currently active language</p>

<h4>Syntax</h4>

<pre><code style="display: none; ">l::current();
</code><pre class="twilightLighter"><span class="kw4">l</span>::<span class="me1">current</span><span class="br0">(</span><span class="br0">)</span>;</pre></pre>

<h4>Returns</h4>

<ul>
<li>(string) return the language iso code (de, en, it, etc...)</li>
</ul>

<h4>Note</h4>

<p>Make sure to add an array of allowed language codes and a default language to your config file to successfully use this function:</p>

<pre><code style="display: none; ">// set allowed languages
c::set('languages', array('de', 'en', 'fr'));

// set default language
c::set('language', 'en');
</code><pre class="twilightLighter"><span class="co1">// set allowed languages</span>
<span class="kw4">c</span>::<span class="me1">set</span><span class="br0">(</span><span class="st0">'languages'</span>, <span class="me1">array</span><span class="br0">(</span><span class="st0">'de'</span>, <span class="st0">'en'</span>, <span class="st0">'fr'</span><span class="br0">)</span><span class="br0">)</span>;
<span class="co1">
// set default language</span>
<span class="kw4">c</span>::<span class="me1">set</span><span class="br0">(</span><span class="st0">'language'</span>, <span class="st0">'en'</span><span class="br0">)</span>;</pre></pre>

<h4>Example</h4>

<pre><code style="display: none; ">echo l::current();
// sample output: en
</code><pre class="twilightLighter"><span class="kw1">echo</span> <span class="kw4">l</span>::<span class="me1">current</span><span class="br0">(</span><span class="br0">)</span>;<span class="co1">
// sample output: en</span></pre></pre>

<hr>

<h3>Function: l::toggle</h3>

<p>Set a different language</p>

<h4>Syntax</h4>

<pre><code style="display: none; ">l::toggle('language');
</code><pre class="twilightLighter"><span class="kw4">l</span>::<span class="me1">toggle</span><span class="br0">(</span><span class="st0">'language'</span><span class="br0">)</span>;</pre></pre>

<h4>Arguments</h4>

<ol>
<li>language - (string) the language code for the new lang. must be defined in the config (see note)</li>
</ol>

<h4>Returns</h4>

<ul>
<li>(string) returns the new language code ('de', 'en', 'fr', etc...)</li>
</ul>

<h4>Note</h4>

<p>Make sure to add an array of allowed language codes and a default language to your config file to successfully use this function:</p>

<pre><code style="display: none; ">// set allowed languages
c::set('languages', array('de', 'en', 'fr'));

// set default language
c::set('language', 'en');
</code><pre class="twilightLighter"><span class="co1">// set allowed languages</span>
<span class="kw4">c</span>::<span class="me1">set</span><span class="br0">(</span><span class="st0">'languages'</span>, <span class="me1">array</span><span class="br0">(</span><span class="st0">'de'</span>, <span class="st0">'en'</span>, <span class="st0">'fr'</span><span class="br0">)</span><span class="br0">)</span>;
<span class="co1">
// set default language</span>
<span class="kw4">c</span>::<span class="me1">set</span><span class="br0">(</span><span class="st0">'language'</span>, <span class="st0">'en'</span><span class="br0">)</span>;</pre></pre>

<h4>Example</h4>

<pre><code style="display: none; ">echo l::toggle('fr');
// sample output: fr
</code><pre class="twilightLighter"><span class="kw1">echo</span> <span class="kw4">l</span>::<span class="me1">toggle</span><span class="br0">(</span><span class="st0">'fr'</span><span class="br0">)</span>;<span class="co1">
// sample output: fr</span></pre></pre>

<hr>

<h3>Function: l::detect</h3>

<p>Detect the user language</p>

<h4>Syntax</h4>

<pre><code style="display: none; ">l::detect();
</code><pre class="twilightLighter"><span class="kw4">l</span>::<span class="me1">detect</span><span class="br0">(</span><span class="br0">)</span>;</pre></pre>

<h4>Returns</h4>

<ul>
<li>(string) returns the new language code ('de', 'en', 'fr', etc...)</li>
</ul>

<h4>Note</h4>

<p>Make sure to add an array of allowed language codes and a default language to your config file to successfully use this function:</p>

<pre><code style="display: none; ">// set allowed languages
c::set('languages', array('de', 'en', 'fr'));

// set default language
c::set('language', 'en');
</code><pre class="twilightLighter"><span class="co1">// set allowed languages</span>
<span class="kw4">c</span>::<span class="me1">set</span><span class="br0">(</span><span class="st0">'languages'</span>, <span class="me1">array</span><span class="br0">(</span><span class="st0">'de'</span>, <span class="st0">'en'</span>, <span class="st0">'fr'</span><span class="br0">)</span><span class="br0">)</span>;
<span class="co1">
// set default language</span>
<span class="kw4">c</span>::<span class="me1">set</span><span class="br0">(</span><span class="st0">'language'</span>, <span class="st0">'en'</span><span class="br0">)</span>;</pre></pre>

<h4>Example</h4>

<pre><code style="display: none; ">echo l::detect();
// sample output: en
</code><pre class="twilightLighter"><span class="kw1">echo</span> <span class="kw4">l</span>::<span class="me1">detect</span><span class="br0">(</span><span class="br0">)</span>;<span class="co1">
// sample output: en</span></pre></pre>

<hr>

<h3>Function: l::locale</h3>

<p>Set the locale enviroment (warning: this is very alpha!!!)</p>

<h4>Syntax</h4>

<pre><code style="display: none; ">l::locale('language');
</code><pre class="twilightLighter"><span class="kw4">l</span>::<span class="me1">locale</span><span class="br0">(</span><span class="st0">'language'</span><span class="br0">)</span>;</pre></pre>

<h4>Arguments</h4>

<ol>
<li>language - (string) the language code ('de', 'en', 'fr', etc...)</li>
</ol>

<h4>Note</h4>

<p>Make sure to add an array of allowed language codes and a default language to your config file to successfully use this function:</p>

<pre><code style="display: none; ">// set allowed languages
c::set('languages', array('de', 'en', 'fr'));

// set default language
c::set('language', 'en');
</code><pre class="twilightLighter"><span class="co1">// set allowed languages</span>
<span class="kw4">c</span>::<span class="me1">set</span><span class="br0">(</span><span class="st0">'languages'</span>, <span class="me1">array</span><span class="br0">(</span><span class="st0">'de'</span>, <span class="st0">'en'</span>, <span class="st0">'fr'</span><span class="br0">)</span><span class="br0">)</span>;
<span class="co1">
// set default language</span>
<span class="kw4">c</span>::<span class="me1">set</span><span class="br0">(</span><span class="st0">'language'</span>, <span class="st0">'en'</span><span class="br0">)</span>;</pre></pre>

<h4>Example</h4>

<pre><code style="display: none; ">echo l::locale('en');
// does: setlocale(LC_ALL, 'en_US', 'en_US', 'en');
</code><pre class="twilightLighter"><span class="kw1">echo</span> <span class="kw4">l</span>::<span class="me1">locale</span><span class="br0">(</span><span class="st0">'en'</span><span class="br0">)</span>;<span class="co1">
// does: setlocale(LC_ALL, 'en_US', 'en_US', 'en');</span></pre></pre>

<hr>

<h3>Function: l::load</h3>

<p>Load a new language file</p>

<h4>Syntax</h4>

<pre><code style="display: none; ">l::load('file');
</code><pre class="twilightLighter"><span class="kw4">l</span>::<span class="me1">load</span><span class="br0">(</span><span class="st0">'file'</span><span class="br0">)</span>;</pre></pre>

<h4>Arguments</h4>

<ol>
<li>file - (string) path to the language file. please see placeholders for more infor</li>
</ol>

<h4>Returns</h4>

<ul>
<li>(array) returns the whole language array on success, otherwise false</li>
</ul>

<h4>Placeholders</h4>

<p>To load the correct language file, the specified filename for the l::load function can 
be mixed with a placeholder:</p>

<p>i.e. instead of <em>'/languages/lang-en.php'</em> write <em>'/languages/lang-{language}.php'</em></p>

<p>The placeholder will be replaced with the current language code automatically.</p>

<h4>Note</h4>

<p>Make sure to add an array of allowed language codes and a default language to your config file to successfully use this function:</p>

<pre><code style="display: none; ">// set allowed languages
c::set('languages', array('de', 'en', 'fr'));

// set default language
c::set('language', 'en');
</code><pre class="twilightLighter"><span class="co1">// set allowed languages</span>
<span class="kw4">c</span>::<span class="me1">set</span><span class="br0">(</span><span class="st0">'languages'</span>, <span class="me1">array</span><span class="br0">(</span><span class="st0">'de'</span>, <span class="st0">'en'</span>, <span class="st0">'fr'</span><span class="br0">)</span><span class="br0">)</span>;
<span class="co1">
// set default language</span>
<span class="kw4">c</span>::<span class="me1">set</span><span class="br0">(</span><span class="st0">'language'</span>, <span class="st0">'en'</span><span class="br0">)</span>;</pre></pre>

<h4>Example</h4>

<pre><code style="display: none; ">l::load('/languages/lang-{language}.php');
// now all the language variables with the correct values for the current language are available
</code><pre class="twilightLighter"><span class="kw4">l</span>::<span class="me1">load</span><span class="br0">(</span><span class="st0">'/languages/lang-{language}.php'</span><span class="br0">)</span>;<span class="co1">
// now all the language variables with the correct values for the current language are available</span></pre></pre>

<hr>

<h3>Function: l::sanitize</h3>

<p>Sanitize the language code to make sure only allowed/installed languages are being loaded</p>

<h4>Syntax</h4>

<pre><code style="display: none; ">l::sanitize('language');
</code><pre class="twilightLighter"><span class="kw4">l</span>::<span class="me1">sanitize</span><span class="br0">(</span><span class="st0">'language'</span><span class="br0">)</span>;</pre></pre>

<h4>Arguments</h4>

<ol>
<li>language - (string) the language code ('de', 'en', 'fr', etc...)</li>
</ol>

<h4>Returns</h4>

<ul>
<li>(string) returns the sanitized language code</li>
</ul>

<h4>Note</h4>

<p>Make sure to add an array of allowed language codes and a default language to your config file to successfully use this function:</p>

<pre><code style="display: none; ">// set allowed languages
c::set('languages', array('de', 'en', 'fr'));

// set default language
c::set('language', 'en');
</code><pre class="twilightLighter"><span class="co1">// set allowed languages</span>
<span class="kw4">c</span>::<span class="me1">set</span><span class="br0">(</span><span class="st0">'languages'</span>, <span class="me1">array</span><span class="br0">(</span><span class="st0">'de'</span>, <span class="st0">'en'</span>, <span class="st0">'fr'</span><span class="br0">)</span><span class="br0">)</span>;
<span class="co1">
// set default language</span>
<span class="kw4">c</span>::<span class="me1">set</span><span class="br0">(</span><span class="st0">'language'</span>, <span class="st0">'en'</span><span class="br0">)</span>;</pre></pre>

<h4>Example</h4>

<pre><code style="display: none; ">c::set('languages', array('de', 'fr', 'en'));
c::set('language', 'en')

echo l::sanitize('it');
// output will be 'en' (the defined default language) because 'it' is not supported   

echo l::sanitize('de');
// output will be 'de' 
</code><pre class="twilightLighter"><span class="kw4">c</span>::<span class="me1">set</span><span class="br0">(</span><span class="st0">'languages'</span>, <span class="me1">array</span><span class="br0">(</span><span class="st0">'de'</span>, <span class="st0">'fr'</span>, <span class="st0">'en'</span><span class="br0">)</span><span class="br0">)</span>;
<span class="kw4">c</span>::<span class="me1">set</span><span class="br0">(</span><span class="st0">'language'</span>, <span class="st0">'en'</span><span class="br0">)</span>

<span class="kw1">echo</span> <span class="kw4">l</span>::<span class="me1">sanitize</span><span class="br0">(</span><span class="st0">'it'</span><span class="br0">)</span>;<span class="co1">
// output will be 'en' (the defined default language) because 'it' is not supported   </span>

<span class="kw1">echo</span> <span class="kw4">l</span>::<span class="me1">sanitize</span><span class="br0">(</span><span class="st0">'de'</span><span class="br0">)</span>;<span class="co1">
// output will be 'de' </span></pre></pre>
</div>  </div>

  <div id="footer">
    © 2010 –&nbsp;<a href="http://bastian-allgeier.de/">Bastian Allgeier</a>
    <ul>
      <li><a href="http://twitter.com/getkirby">Follow Kirby on Twitter</a></li>
    </ul>
  </div>

</div>

<script type="text/javascript" src="./language_files/mootools.js"></script>
<script type="text/javascript" src="./language_files/Lighter.js"></script>
<script type="text/javascript" src="./language_files/Fuel.js"></script>
<script type="text/javascript" src="./language_files/scripts.js"></script>

<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script><script src="./language_files/ga.js" type="text/javascript"></script>
<script type="text/javascript">
try {
var pageTracker = _gat._getTracker("UA-431401-11");
pageTracker._trackPageview();
} catch(err) {}</script>




</body></html>