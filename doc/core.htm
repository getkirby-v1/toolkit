<!DOCTYPE html>
<!-- saved from url=(0029)http://getkirby.com/docs/core -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<title>Kirby</title>


<meta name="description" content="Kirby is a super simple, designy PHP toolkit">
<meta name="keywords" content="php, toolkit, jquery, simple, design">
<meta name="author" content="Bastian Allgeier">
<meta http-equiv="imagetoolbar" content="no">

<link rel="shortcut icon" href="http://getkirby.com/favicon.ico">

<link rel="stylesheet" href="./core_files/styles.css" media="all" type="text/css">

<link rel="stylesheet" type="text/css" media="screen" href="./core_files/Flame.twilight.css"><script src="./core_files/Fuel.php.js" type="text/javascript"></script></head>

<body>

<div id="page">

  <div id="menu">
  
    <ul>
            <li><a href="http://getkirby.com/home">kirby</a></li>
            <li><a class="active" href="http://getkirby.com/docs">docs</a></li>
            <li><a href="http://getkirby.com/download">download</a></li>
            <li><a href="http://getkirby.com/plugins">plugins</a></li>
          </ul>
  
  </div>
  
  <div id="content" class="docs">
  <h1>Documentation</h1>


<ul id="docsmenu">
    <li><a href="http://getkirby.com/docs/array">array</a></li>
      <li><a href="http://getkirby.com/docs/browser">browser</a></li>
      <li><a href="http://getkirby.com/docs/config">config</a></li>
      <li><a href="http://getkirby.com/docs/content">content</a></li>
      <li><a href="http://getkirby.com/docs/cookie">cookie</a></li>
      <li><a class="active" href="./core_files/core.htm">core</a></li>
      <li><a href="http://getkirby.com/docs/database">database</a></li>
      <li><a href="http://getkirby.com/docs/dir">dir</a></li>
      <li><a href="http://getkirby.com/docs/file">file</a></li>
      <li><a href="http://getkirby.com/docs/globals">globals</a></li>
      <li><a href="http://getkirby.com/docs/helper">helper</a></li>
      <li><a href="http://getkirby.com/docs/language">language</a></li>
      <li><a href="http://getkirby.com/docs/request">request</a></li>
      <li><a href="http://getkirby.com/docs/server">server</a></li>
      <li><a href="http://getkirby.com/docs/session">session</a></li>
      <li><a href="http://getkirby.com/docs/size">size</a></li>
      <li><a href="http://getkirby.com/docs/string">string</a></li>
      <li><a href="http://getkirby.com/docs/url">url</a></li>
      <li><a href="http://getkirby.com/docs/validation">validation</a></li>
      <li><a href="http://getkirby.com/docs/xml">xml</a></li>
  </ul>

<div id="documentation">
<h2>Core</h2>

<p>The core class helps to handle errors in a very stripped down way and has a little built-in trace function.</p>

<h3>How to handle errors and stuff with the core</h3>

<p>There are a lot of cool PHP features to handle errors, but I could never adjust to them. Here's my way to do it:</p>

<pre><code style="display: none; ">function somefunction($a) {

    if($a==5) return array(
        'status' =&gt; 'success',
        'msg' =&gt; 'That is exactly what we needed!'
    );

    return array(
        'status' =&gt; 'error',
        'msg' =&gt; 'Please provide a valid value for $a'
    );            

}

// call the function
$response = somefunction(5);

// handling errors within the function is very easy now:
if(core::error($response)) echo core::msg($response);
</code><pre class="twilightLighter"><span class="kw1">function</span> <span class="me1">somefunction</span><span class="br0">(</span><span class="kw3">$a</span><span class="br0">)</span> <span class="br0">{</span>

    <span class="me1">if</span><span class="br0">(</span><span class="kw3">$a</span>==<span class="nu0">5</span><span class="br0">)</span> <span class="kw1">return</span> <span class="me1">array</span><span class="br0">(</span>
        <span class="st0">'status'</span> =&gt; <span class="st0">'success'</span>,
        <span class="st0">'msg'</span> =&gt; <span class="st0">'That is exactly what we needed!'</span>
    <span class="br0">)</span>;

    <span class="kw1">return</span> <span class="me1">array</span><span class="br0">(</span>
        <span class="st0">'status'</span> =&gt; <span class="st0">'error'</span>,
        <span class="st0">'msg'</span> =&gt; <span class="st0">'Please provide a valid value for $a'</span>
    <span class="br0">)</span>;            

<span class="br0">}</span>
<span class="co1">
// call the function</span>
<span class="kw3">$response</span> = <span class="me1">somefunction</span><span class="br0">(</span><span class="nu0">5</span><span class="br0">)</span>;
<span class="co1">
// handling errors within the function is very easy now:</span>
<span class="me1">if</span><span class="br0">(</span><span class="kw4">core</span>::<span class="me1">error</span><span class="br0">(</span><span class="kw3">$response</span><span class="br0">)</span><span class="br0">)</span> <span class="kw1">echo</span> <span class="kw4">core</span>::<span class="me1">msg</span><span class="br0">(</span><span class="kw3">$response</span><span class="br0">)</span>;</pre></pre>

<p>All you have to do is to return an array with a status value and a msg value. You can add as many additional values to the array as you want. This way to handle errors does not make sense for small functions, where returning true or false does a better job.</p>

<hr>

<h3>Function: core::status</h3>

<p>Return the status from a core respone</p>

<h4>Syntax</h4>

<pre><code style="display: none; ">core::status('response');
</code><pre class="twilightLighter"><span class="kw4">core</span>::<span class="me1">status</span><span class="br0">(</span><span class="st0">'response'</span><span class="br0">)</span>;</pre></pre>

<h4>Arguments</h4>

<ol>
<li>response - (array) the response from a function</li>
</ol>

<h4>Returns</h4>

<ul>
<li>(string) returns either error or success</li>
</ul>

<h4>Example</h4>

<pre><code style="display: none; ">function somefunction($a) {

    if($a==5) return array(
        'status' =&gt; 'success',
        'msg' =&gt; 'That is exactly what we needed!'
    );

    return array(
        'status' =&gt; 'error',
        'msg' =&gt; 'Please provide a valid value for $a'
    );            

}

echo core::status(somefunction(5));
// output: success    

echo core::status(somefunction(4));
// output: error
</code><pre class="twilightLighter"><span class="kw1">function</span> <span class="me1">somefunction</span><span class="br0">(</span><span class="kw3">$a</span><span class="br0">)</span> <span class="br0">{</span>

    <span class="me1">if</span><span class="br0">(</span><span class="kw3">$a</span>==<span class="nu0">5</span><span class="br0">)</span> <span class="kw1">return</span> <span class="me1">array</span><span class="br0">(</span>
        <span class="st0">'status'</span> =&gt; <span class="st0">'success'</span>,
        <span class="st0">'msg'</span> =&gt; <span class="st0">'That is exactly what we needed!'</span>
    <span class="br0">)</span>;

    <span class="kw1">return</span> <span class="me1">array</span><span class="br0">(</span>
        <span class="st0">'status'</span> =&gt; <span class="st0">'error'</span>,
        <span class="st0">'msg'</span> =&gt; <span class="st0">'Please provide a valid value for $a'</span>
    <span class="br0">)</span>;            

<span class="br0">}</span>

<span class="kw1">echo</span> <span class="kw4">core</span>::<span class="me1">status</span><span class="br0">(</span><span class="me1">somefunction</span><span class="br0">(</span><span class="nu0">5</span><span class="br0">)</span><span class="br0">)</span>;<span class="co1">
// output: success    </span>

<span class="kw1">echo</span> <span class="kw4">core</span>::<span class="me1">status</span><span class="br0">(</span><span class="me1">somefunction</span><span class="br0">(</span><span class="nu0">4</span><span class="br0">)</span><span class="br0">)</span>;<span class="co1">
// output: error</span></pre></pre>

<hr>

<h3>Function: core::msg</h3>

<p>Return the message from a core respone</p>

<h4>Syntax</h4>

<pre><code style="display: none; ">core::msg('response');
</code><pre class="twilightLighter"><span class="kw4">core</span>::<span class="me1">msg</span><span class="br0">(</span><span class="st0">'response'</span><span class="br0">)</span>;</pre></pre>

<h4>Arguments</h4>

<ol>
<li>response - (array) the response from a function</li>
</ol>

<h4>Returns</h4>

<ul>
<li>(string) returns the message string</li>
</ul>

<h4>Example</h4>

<pre><code style="display: none; ">function somefunction($a) {

    if($a==5) return array(
        'status' =&gt; 'success',
        'msg' =&gt; 'That is exactly what we needed!'
    );

    return array(
        'status' =&gt; 'error',
        'msg' =&gt; 'Please provide a valid value for $a'
    );            

}

echo core::msg(somefunction(5));
// output: 'That is exactly what we needed!'

echo core::msg(somefunction(4));
// output: 'Please provide a valid value for $a'
</code><pre class="twilightLighter"><span class="kw1">function</span> <span class="me1">somefunction</span><span class="br0">(</span><span class="kw3">$a</span><span class="br0">)</span> <span class="br0">{</span>

    <span class="me1">if</span><span class="br0">(</span><span class="kw3">$a</span>==<span class="nu0">5</span><span class="br0">)</span> <span class="kw1">return</span> <span class="me1">array</span><span class="br0">(</span>
        <span class="st0">'status'</span> =&gt; <span class="st0">'success'</span>,
        <span class="st0">'msg'</span> =&gt; <span class="st0">'That is exactly what we needed!'</span>
    <span class="br0">)</span>;

    <span class="kw1">return</span> <span class="me1">array</span><span class="br0">(</span>
        <span class="st0">'status'</span> =&gt; <span class="st0">'error'</span>,
        <span class="st0">'msg'</span> =&gt; <span class="st0">'Please provide a valid value for $a'</span>
    <span class="br0">)</span>;            

<span class="br0">}</span>

<span class="kw1">echo</span> <span class="kw4">core</span>::<span class="me1">msg</span><span class="br0">(</span><span class="me1">somefunction</span><span class="br0">(</span><span class="nu0">5</span><span class="br0">)</span><span class="br0">)</span>;<span class="co1">
// output: 'That is exactly what we needed!'</span>

<span class="kw1">echo</span> <span class="kw4">core</span>::<span class="me1">msg</span><span class="br0">(</span><span class="me1">somefunction</span><span class="br0">(</span><span class="nu0">4</span><span class="br0">)</span><span class="br0">)</span>;<span class="co1">
// output: 'Please provide a valid value for $a'</span></pre></pre>

<hr>

<h3>Function: core::error</h3>

<p>Checks wheater the response contains an error or not.</p>

<h4>Syntax</h4>

<pre><code style="display: none; ">core::error('response');
</code><pre class="twilightLighter"><span class="kw4">core</span>::<span class="me1">error</span><span class="br0">(</span><span class="st0">'response'</span><span class="br0">)</span>;</pre></pre>

<h4>Arguments</h4>

<ol>
<li>response - (array) the response from a function</li>
</ol>

<h4>Returns</h4>

<ul>
<li>(boolean) true: the response contains an error, otherwise return false</li>
</ul>

<h4>Example</h4>

<pre><code style="display: none; ">function somefunction($a) {

    if($a==5) return array(
        'status' =&gt; 'success',
        'msg' =&gt; 'That is exactly what we needed!'
    );

    return array(
        'status' =&gt; 'error',
        'msg' =&gt; 'Please provide a valid value for $a'
    );            

}

$response = somefunction(5);
if(core::error($response)) echo 'Ups, that failed!';
// output: nothing

$response = somefunction(4);
if(core::error($response)) echo 'Ups, that failed!';
// output: 'Ups, that failed!'
</code><pre class="twilightLighter"><span class="kw1">function</span> <span class="me1">somefunction</span><span class="br0">(</span><span class="kw3">$a</span><span class="br0">)</span> <span class="br0">{</span>

    <span class="me1">if</span><span class="br0">(</span><span class="kw3">$a</span>==<span class="nu0">5</span><span class="br0">)</span> <span class="kw1">return</span> <span class="me1">array</span><span class="br0">(</span>
        <span class="st0">'status'</span> =&gt; <span class="st0">'success'</span>,
        <span class="st0">'msg'</span> =&gt; <span class="st0">'That is exactly what we needed!'</span>
    <span class="br0">)</span>;

    <span class="kw1">return</span> <span class="me1">array</span><span class="br0">(</span>
        <span class="st0">'status'</span> =&gt; <span class="st0">'error'</span>,
        <span class="st0">'msg'</span> =&gt; <span class="st0">'Please provide a valid value for $a'</span>
    <span class="br0">)</span>;            

<span class="br0">}</span>

<span class="kw3">$response</span> = <span class="me1">somefunction</span><span class="br0">(</span><span class="nu0">5</span><span class="br0">)</span>;
<span class="me1">if</span><span class="br0">(</span><span class="kw4">core</span>::<span class="me1">error</span><span class="br0">(</span><span class="kw3">$response</span><span class="br0">)</span><span class="br0">)</span> <span class="kw1">echo</span> <span class="st0">'Ups, that failed!'</span>;<span class="co1">
// output: nothing</span>

<span class="kw3">$response</span> = <span class="me1">somefunction</span><span class="br0">(</span><span class="nu0">4</span><span class="br0">)</span>;
<span class="me1">if</span><span class="br0">(</span><span class="kw4">core</span>::<span class="me1">error</span><span class="br0">(</span><span class="kw3">$response</span><span class="br0">)</span><span class="br0">)</span> <span class="kw1">echo</span> <span class="st0">'Ups, that failed!'</span>;<span class="co1">
// output: 'Ups, that failed!'</span></pre></pre>

<hr>

<h3>Function: core::trace</h3>

<p>Simple function to trace stuff for debugging.</p>

<h4>Syntax</h4>

<pre><code style="display: none; ">core::trace(['msg']);
</code><pre class="twilightLighter"><span class="kw4">core</span>::<span class="me1">trace</span><span class="br0">(</span><span class="br0">[</span><span class="st0">'msg'</span><span class="br0">]</span><span class="br0">)</span>;</pre></pre>

<h4>Arguments</h4>

<ol>
<li>msg - (string) the stuff you want to trace</li>
</ol>

<h4>Returns</h4>

<ul>
<li>(mixed) return either nothing or if you don't specify a msg it returns the whole trace array </li>
</ul>

<h4>Example</h4>

<pre><code style="display: none; ">core::trace('this is my super duper trace message');

// later
core::trace('this is another super duper trace message');

// later
$trace = core::trace();

// trace: array(
//    'this is my super duper trace message',
//    'this is another super duper trace message'
// );
</code><pre class="twilightLighter"><span class="kw4">core</span>::<span class="me1">trace</span><span class="br0">(</span><span class="st0">'this is my super duper trace message'</span><span class="br0">)</span>;
<span class="co1">
// later</span>
<span class="kw4">core</span>::<span class="me1">trace</span><span class="br0">(</span><span class="st0">'this is another super duper trace message'</span><span class="br0">)</span>;
<span class="co1">
// later</span>
<span class="kw3">$trace</span> = <span class="kw4">core</span>::<span class="me1">trace</span><span class="br0">(</span><span class="br0">)</span>;
<span class="co1">
// trace: array(</span><span class="co1">
//    'this is my super duper trace message',</span><span class="co1">
//    'this is another super duper trace message'</span><span class="co1">
// );</span></pre></pre>
</div>  </div>

  <div id="footer">
    © 2010 –&nbsp;<a href="http://bastian-allgeier.de/">Bastian Allgeier</a>
    <ul>
      <li><a href="http://twitter.com/getkirby">Follow Kirby on Twitter</a></li>
    </ul>
  </div>

</div>

<script type="text/javascript" src="./core_files/mootools.js"></script>
<script type="text/javascript" src="./core_files/Lighter.js"></script>
<script type="text/javascript" src="./core_files/Fuel.js"></script>
<script type="text/javascript" src="./core_files/scripts.js"></script>

<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script><script src="./core_files/ga.js" type="text/javascript"></script>
<script type="text/javascript">
try {
var pageTracker = _gat._getTracker("UA-431401-11");
pageTracker._trackPageview();
} catch(err) {}</script>




</body></html>