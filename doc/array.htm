<!DOCTYPE html>
<!-- saved from url=(0024)http://getkirby.com/docs -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<title>Kirby</title>


<meta name="description" content="Kirby is a super simple, designy PHP toolkit">
<meta name="keywords" content="php, toolkit, jquery, simple, design">
<meta name="author" content="Bastian Allgeier">
<meta http-equiv="imagetoolbar" content="no">

<link rel="shortcut icon" href="http://getkirby.com/favicon.ico">

<link rel="stylesheet" href="./array_files/styles.css" media="all" type="text/css">

<link rel="stylesheet" type="text/css" media="screen" href="./array_files/Flame.twilight.css"><script src="./array_files/Fuel.php.js" type="text/javascript"></script></head>

<body>

<div id="page">

  <div id="menu">
  
    <ul>
            <li><a href="http://getkirby.com/home">kirby</a></li>
            <li><a class="active" href="./array_files/array.htm">docs</a></li>
            <li><a href="http://getkirby.com/download">download</a></li>
            <li><a href="http://getkirby.com/plugins">plugins</a></li>
          </ul>
  
  </div>
  
  <div id="content" class="docs">
  <h1>Documentation</h1>


<ul id="docsmenu">
    <li><a class="active" href="http://getkirby.com/docs/array">array</a></li>
      <li><a href="http://getkirby.com/docs/browser">browser</a></li>
      <li><a href="http://getkirby.com/docs/config">config</a></li>
      <li><a href="http://getkirby.com/docs/content">content</a></li>
      <li><a href="http://getkirby.com/docs/cookie">cookie</a></li>
      <li><a href="http://getkirby.com/docs/core">core</a></li>
      <li><a href="http://getkirby.com/docs/database">database</a></li>
      <li><a href="http://getkirby.com/docs/dir">dir</a></li>
      <li><a href="http://getkirby.com/docs/file">file</a></li>
      <li><a href="http://getkirby.com/docs/globals">globals</a></li>
      <li><a href="http://getkirby.com/docs/helper">helper</a></li>
      <li><a href="http://getkirby.com/docs/language">language</a></li>
      <li><a href="http://getkirby.com/docs/request">request</a></li>
      <li><a href="http://getkirby.com/docs/server">server</a></li>
      <li><a href="http://getkirby.com/docs/session">session</a></li>
      <li><a href="http://getkirby.com/docs/size">size</a></li>
      <li><a href="http://getkirby.com/docs/string">string</a></li>
      <li><a href="http://getkirby.com/docs/url">url</a></li>
      <li><a href="http://getkirby.com/docs/validation">validation</a></li>
      <li><a href="http://getkirby.com/docs/xml">xml</a></li>
  </ul>

<div id="documentation">
<h2>A (Array)</h2>

<p>The a class is a collection of helpers to make things easier with arrays.</p>

<h3>Function: a::get</h3>

<p>get any value from the array by key</p>

<h4>Syntax</h4>

<pre><code style="display: none; ">a::get('array', 'key'[, 'default']);
</code><pre class="twilightLighter"><span class="kw4">a</span>::<span class="me1">get</span><span class="br0">(</span><span class="st0">'array'</span>, <span class="st0">'key'</span><span class="br0">[</span>, <span class="st0">'default'</span><span class="br0">]</span><span class="br0">)</span>;</pre></pre>

<h4>Arguments</h4>

<ol>
<li>array - (array) the array to search in</li>
<li>key - (string) the key</li>
<li>default - (mixed) anything that should be returned when nothing is found in the array</li>
</ol>

<h4>Returns</h4>

<ul>
<li>(mixed) whatever is stored with this key</li>
</ul>

<h4>Example</h4>

<pre><code style="display: none; ">$array = array(
    'cat' =&gt; 'miao',
    'dog' =&gt; 'wuff',
    'bird' =&gt; 'tweet'
);    

echo a::get($array, 'cat');
// output: 'miao'

echo a::get($array, 'elephant', 'shut up');
// output: 'shut up'
</code><pre class="twilightLighter"><span class="kw3">$array</span> = <span class="me1">array</span><span class="br0">(</span>
    <span class="st0">'cat'</span> =&gt; <span class="st0">'miao'</span>,
    <span class="st0">'dog'</span> =&gt; <span class="st0">'wuff'</span>,
    <span class="st0">'bird'</span> =&gt; <span class="st0">'tweet'</span>
<span class="br0">)</span>;    

<span class="kw1">echo</span> <span class="kw4">a</span>::<span class="me1">get</span><span class="br0">(</span><span class="kw3">$array</span>, <span class="st0">'cat'</span><span class="br0">)</span>;<span class="co1">
// output: 'miao'</span>

<span class="kw1">echo</span> <span class="kw4">a</span>::<span class="me1">get</span><span class="br0">(</span><span class="kw3">$array</span>, <span class="st0">'elephant'</span>, <span class="st0">'shut up'</span><span class="br0">)</span>;<span class="co1">
// output: 'shut up'</span></pre></pre>

<hr>

<h3>Function: a::remove</h3>

<p>remove an item from an array</p>

<h4>Syntax</h4>

<pre><code style="display: none; ">a::remove('array', 'key');
</code><pre class="twilightLighter"><span class="kw4">a</span>::<span class="me1">remove</span><span class="br0">(</span><span class="st0">'array'</span>, <span class="st0">'key'</span><span class="br0">)</span>;</pre></pre>

<h4>Arguments</h4>

<ol>
<li>array - (array) the array to remove something from</li>
<li>key - (string) the key</li>
</ol>

<h4>Returns</h4>

<ul>
<li>(array) the array</li>
</ul>

<h4>Example</h4>

<pre><code style="display: none; ">$array = array(
    'cat' =&gt; 'miao',
    'dog' =&gt; 'wuff',
    'bird' =&gt; 'tweet'
);    

$array = a::remove($array, 'cat');
// array is now: array(
//     'dog' =&gt; 'wuff',
//     'bird' =&gt; 'tweet'
// );
</code><pre class="twilightLighter"><span class="kw3">$array</span> = <span class="me1">array</span><span class="br0">(</span>
    <span class="st0">'cat'</span> =&gt; <span class="st0">'miao'</span>,
    <span class="st0">'dog'</span> =&gt; <span class="st0">'wuff'</span>,
    <span class="st0">'bird'</span> =&gt; <span class="st0">'tweet'</span>
<span class="br0">)</span>;    

<span class="kw3">$array</span> = <span class="kw4">a</span>::<span class="me1">remove</span><span class="br0">(</span><span class="kw3">$array</span>, <span class="st0">'cat'</span><span class="br0">)</span>;<span class="co1">
// array is now: array(</span><span class="co1">
//     'dog' =&gt; 'wuff',</span><span class="co1">
//     'bird' =&gt; 'tweet'</span><span class="co1">
// );</span></pre></pre>

<hr>

<h3>Function: a::show</h3>

<p>a pretty useful debug function to print the content of arrays</p>

<h4>Syntax</h4>

<pre><code style="display: none; ">a::show('array'[, 'echo']);
</code><pre class="twilightLighter"><span class="kw4">a</span>::<span class="me1">show</span><span class="br0">(</span><span class="st0">'array'</span><span class="br0">[</span>, <span class="st0">'echo'</span><span class="br0">]</span><span class="br0">)</span>;</pre></pre>

<h4>Arguments</h4>

<ol>
<li>array - (array) the array to show</li>
<li>echo - (boolean) true: echo the output immediately, false: return the output</li>
</ol>

<h4>Returns</h4>

<ul>
<li>(string) the html with all the array content</li>
</ul>

<h4>Example</h4>

<pre><code style="display: none; ">$array = array(
    'cat' =&gt; 'miao',
    'dog' =&gt; 'wuff',
    'bird' =&gt; 'tweet'
);    

a::show($array);

// output: 
// Array
// (
//     [cat] =&gt; miao
//     [dog] =&gt; wuff
//     [bird] =&gt; tweet
// )
</code><pre class="twilightLighter"><span class="kw3">$array</span> = <span class="me1">array</span><span class="br0">(</span>
    <span class="st0">'cat'</span> =&gt; <span class="st0">'miao'</span>,
    <span class="st0">'dog'</span> =&gt; <span class="st0">'wuff'</span>,
    <span class="st0">'bird'</span> =&gt; <span class="st0">'tweet'</span>
<span class="br0">)</span>;    

<span class="kw4">a</span>::<span class="me1">show</span><span class="br0">(</span><span class="kw3">$array</span><span class="br0">)</span>;
<span class="co1">
// output: </span><span class="co1">
// Array</span><span class="co1">
// (</span><span class="co1">
//     [cat] =&gt; miao</span><span class="co1">
//     [dog] =&gt; wuff</span><span class="co1">
//     [bird] =&gt; tweet</span><span class="co1">
// )</span></pre></pre>

<hr>

<h3>Function: a::json</h3>

<p>Convert the array to a json string</p>

<h4>Syntax</h4>

<pre><code style="display: none; ">a::json('array');
</code><pre class="twilightLighter"><span class="kw4">a</span>::<span class="me1">json</span><span class="br0">(</span><span class="st0">'array'</span><span class="br0">)</span>;</pre></pre>

<h4>Arguments</h4>

<ol>
<li>array - (array) the array to convert</li>
</ol>

<h4>Returns</h4>

<ul>
<li>(string) the json string</li>
</ul>

<h4>Example</h4>

<pre><code style="display: none; ">$array = array(
    'cat' =&gt; 'miao',
    'dog' =&gt; 'wuff',
    'bird' =&gt; 'tweet'
);    

echo a::json($array);
// output: {"cat":"miao","dog":"wuff","bird":"tweet"}    
</code><pre class="twilightLighter"><span class="kw3">$array</span> = <span class="me1">array</span><span class="br0">(</span>
    <span class="st0">'cat'</span> =&gt; <span class="st0">'miao'</span>,
    <span class="st0">'dog'</span> =&gt; <span class="st0">'wuff'</span>,
    <span class="st0">'bird'</span> =&gt; <span class="st0">'tweet'</span>
<span class="br0">)</span>;    

<span class="kw1">echo</span> <span class="kw4">a</span>::<span class="me1">json</span><span class="br0">(</span><span class="kw3">$array</span><span class="br0">)</span>;<span class="co1">
// output: {"cat":"miao","dog":"wuff","bird":"tweet"}    </span></pre></pre>

<hr>

<h3>Function: a::xml</h3>

<p>Convert the array to xml</p>

<h4>Syntax</h4>

<pre><code style="display: none; ">a::xml('array'[, 'tag'[, 'head'[, 'charset'[,'tab']]]]);
</code><pre class="twilightLighter"><span class="kw4">a</span>::<span class="me1">xml</span><span class="br0">(</span><span class="st0">'array'</span><span class="br0">[</span>, <span class="st0">'tag'</span><span class="br0">[</span>, <span class="st0">'head'</span><span class="br0">[</span>, <span class="st0">'charset'</span><span class="br0">[</span>,<span class="st0">'tab'</span><span class="br0">]</span><span class="br0">]</span><span class="br0">]</span><span class="br0">]</span><span class="br0">)</span>;</pre></pre>

<h4>Arguments</h4>

<ol>
<li>array - (array) the array to convert</li>
<li>tag - (string) the root tag (default = root)</li>
<li>head - (boolean) true: a xml header will be added, false: returns just the raw xml</li>
<li>charset - (string) default is utf-8</li>
<li>tab - (string) determins the used tab character(s), default is '  '</li>
</ol>

<h4>Returns</h4>

<ul>
<li>(string) the xml</li>
</ul>

<h4>Example</h4>

<pre><code style="display: none; ">$array = array(
    'cat' =&gt; 'miao',
    'dog' =&gt; 'wuff',
    'bird' =&gt; 'tweet'
);    

echo a::xml($array, 'animals');
// output: 
// &lt;animals&gt;
//   &lt;cat&gt;miao&lt;/cat&gt;
//   &lt;dog&gt;wuff&lt;/dog&gt;
//   &lt;bird&gt;tweet&lt;/bird&gt;
// &lt;/animals&gt;
</code><pre class="twilightLighter"><span class="kw3">$array</span> = <span class="me1">array</span><span class="br0">(</span>
    <span class="st0">'cat'</span> =&gt; <span class="st0">'miao'</span>,
    <span class="st0">'dog'</span> =&gt; <span class="st0">'wuff'</span>,
    <span class="st0">'bird'</span> =&gt; <span class="st0">'tweet'</span>
<span class="br0">)</span>;    

<span class="kw1">echo</span> <span class="kw4">a</span>::<span class="me1">xml</span><span class="br0">(</span><span class="kw3">$array</span>, <span class="st0">'animals'</span><span class="br0">)</span>;<span class="co1">
// output: </span><span class="co1">
// &lt;animals&gt;</span><span class="co1">
//   &lt;cat&gt;miao&lt;/cat&gt;</span><span class="co1">
//   &lt;dog&gt;wuff&lt;/dog&gt;</span><span class="co1">
//   &lt;bird&gt;tweet&lt;/bird&gt;</span><span class="co1">
// &lt;/animals&gt;</span></pre></pre>

<hr>

<h3>Function: a::extract</h3>

<p>Extract a certain field from a multidimensional array</p>

<h4>Syntax</h4>

<pre><code style="display: none; ">a::extract('array', 'key');
</code><pre class="twilightLighter"><span class="kw4">a</span>::<span class="me1">extract</span><span class="br0">(</span><span class="st0">'array'</span>, <span class="st0">'key'</span><span class="br0">)</span>;</pre></pre>

<h4>Arguments</h4>

<ol>
<li>array - (array) the array to extract from</li>
<li>key - (string) the name of the key</li>
</ol>

<h4>Returns</h4>

<ul>
<li>(array) a new array with the extracted values</li>
</ul>

<h4>Example</h4>

<pre><code style="display: none; ">$array[0] = array(
    'id' =&gt; 1,
    'username' =&gt; 'bastian',
);    

$array[1] = array(
    'id' =&gt; 2,
    'username' =&gt; 'peter',
);    

$array[3] = array(
    'id' =&gt; 3,
    'username' =&gt; 'john',
);    

$extract = a::extract($array, 'username');
// output: array(
//    'bastian',
//    'peter',
//    'john'
// );
</code><pre class="twilightLighter"><span class="kw3">$array</span><span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span> = <span class="me1">array</span><span class="br0">(</span>
    <span class="st0">'id'</span> =&gt; <span class="nu0">1</span>,
    <span class="st0">'username'</span> =&gt; <span class="st0">'bastian'</span>,
<span class="br0">)</span>;    

<span class="kw3">$array</span><span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span> = <span class="me1">array</span><span class="br0">(</span>
    <span class="st0">'id'</span> =&gt; <span class="nu0">2</span>,
    <span class="st0">'username'</span> =&gt; <span class="st0">'peter'</span>,
<span class="br0">)</span>;    

<span class="kw3">$array</span><span class="br0">[</span><span class="nu0">3</span><span class="br0">]</span> = <span class="me1">array</span><span class="br0">(</span>
    <span class="st0">'id'</span> =&gt; <span class="nu0">3</span>,
    <span class="st0">'username'</span> =&gt; <span class="st0">'john'</span>,
<span class="br0">)</span>;    

<span class="kw3">$extract</span> = <span class="kw4">a</span>::<span class="me1">extract</span><span class="br0">(</span><span class="kw3">$array</span>, <span class="st0">'username'</span><span class="br0">)</span>;<span class="co1">
// output: array(</span><span class="co1">
//    'bastian',</span><span class="co1">
//    'peter',</span><span class="co1">
//    'john'</span><span class="co1">
// );</span></pre></pre>

<hr>

<h3>Function: a::shuffle</h3>

<p>Shuffle an array and keep the key/value pairs</p>

<h4>Syntax</h4>

<pre><code style="display: none; ">a::shuffle('array');
</code><pre class="twilightLighter"><span class="kw4">a</span>::<span class="me1">shuffle</span><span class="br0">(</span><span class="st0">'array'</span><span class="br0">)</span>;</pre></pre>

<h4>Arguments</h4>

<ol>
<li>array - (array) the array to shuffle</li>
</ol>

<h4>Returns</h4>

<ul>
<li>(array) the shuffled array</li>
</ul>

<h4>Example</h4>

<pre><code style="display: none; ">$array = array(
    'cat' =&gt; 'miao',
    'dog' =&gt; 'wuff',
    'bird' =&gt; 'tweet'
);    

$shuffled = a::shuffle($array);
// output: array(
//    'dog' =&gt; 'wuff',
//    'cat' =&gt; 'miao',
//    'bird' =&gt; 'tweet'
// );
</code><pre class="twilightLighter"><span class="kw3">$array</span> = <span class="me1">array</span><span class="br0">(</span>
    <span class="st0">'cat'</span> =&gt; <span class="st0">'miao'</span>,
    <span class="st0">'dog'</span> =&gt; <span class="st0">'wuff'</span>,
    <span class="st0">'bird'</span> =&gt; <span class="st0">'tweet'</span>
<span class="br0">)</span>;    

<span class="kw3">$shuffled</span> = <span class="kw4">a</span>::<span class="me1">shuffle</span><span class="br0">(</span><span class="kw3">$array</span><span class="br0">)</span>;<span class="co1">
// output: array(</span><span class="co1">
//    'dog' =&gt; 'wuff',</span><span class="co1">
//    'cat' =&gt; 'miao',</span><span class="co1">
//    'bird' =&gt; 'tweet'</span><span class="co1">
// );</span></pre></pre>

<hr>

<h3>Function: a::first</h3>

<p>Get the first element of the array</p>

<h4>Syntax</h4>

<pre><code style="display: none; ">a::first('array');
</code><pre class="twilightLighter"><span class="kw4">a</span>::<span class="me1">first</span><span class="br0">(</span><span class="st0">'array'</span><span class="br0">)</span>;</pre></pre>

<h4>Arguments</h4>

<ol>
<li>array - (array) the array</li>
</ol>

<h4>Returns</h4>

<ul>
<li>(mixed) the first element</li>
</ul>

<h4>Example</h4>

<pre><code style="display: none; ">$array = array(
    'cat',
    'dog',
    'bird',
);    

$first = a::first($array);
// first: 'cat'
</code><pre class="twilightLighter"><span class="kw3">$array</span> = <span class="me1">array</span><span class="br0">(</span>
    <span class="st0">'cat'</span>,
    <span class="st0">'dog'</span>,
    <span class="st0">'bird'</span>,
<span class="br0">)</span>;    

<span class="kw3">$first</span> = <span class="kw4">a</span>::<span class="me1">first</span><span class="br0">(</span><span class="kw3">$array</span><span class="br0">)</span>;<span class="co1">
// first: 'cat'</span></pre></pre>

<hr>

<h3>Function: a::last</h3>

<p>Get the last element of the array</p>

<h4>Syntax</h4>

<pre><code style="display: none; ">a::last('array');
</code><pre class="twilightLighter"><span class="kw4">a</span>::<span class="me1">last</span><span class="br0">(</span><span class="st0">'array'</span><span class="br0">)</span>;</pre></pre>

<h4>Arguments</h4>

<ol>
<li>array - (array) the array</li>
</ol>

<h4>Returns</h4>

<ul>
<li>(mixed) the last element</li>
</ul>

<h4>Example</h4>

<pre><code style="display: none; ">$array = array(
    'cat',
    'dog',
    'bird',
);    

$last = a::last($array);
// first: 'bird'
</code><pre class="twilightLighter"><span class="kw3">$array</span> = <span class="me1">array</span><span class="br0">(</span>
    <span class="st0">'cat'</span>,
    <span class="st0">'dog'</span>,
    <span class="st0">'bird'</span>,
<span class="br0">)</span>;    

<span class="kw3">$last</span> = <span class="kw4">a</span>::<span class="me1">last</span><span class="br0">(</span><span class="kw3">$array</span><span class="br0">)</span>;<span class="co1">
// first: 'bird'</span></pre></pre>

<hr>

<h3>Function: a::search</h3>

<p>Search for the given element inside the array</p>

<h4>Syntax</h4>

<pre><code style="display: none; ">a::search('array', 'searchword');
</code><pre class="twilightLighter"><span class="kw4">a</span>::<span class="me1">search</span><span class="br0">(</span><span class="st0">'array'</span>, <span class="st0">'searchword'</span><span class="br0">)</span>;</pre></pre>

<h4>Arguments</h4>

<ol>
<li>array - (array) the array</li>
<li>searchword - (string) the searchword</li>
</ol>

<h4>Returns</h4>

<ul>
<li>(array) returns an array of searchresults</li>
</ul>

<h4>Example</h4>

<pre><code style="display: none; ">$array = array(
    'cat',
    'dog',
    'bird',
);    

$search = a::search($array, 'cat');
// output: array(
//    'cat'
// )
</code><pre class="twilightLighter"><span class="kw3">$array</span> = <span class="me1">array</span><span class="br0">(</span>
    <span class="st0">'cat'</span>,
    <span class="st0">'dog'</span>,
    <span class="st0">'bird'</span>,
<span class="br0">)</span>;    

<span class="kw3">$search</span> = <span class="kw4">a</span>::<span class="me1">search</span><span class="br0">(</span><span class="kw3">$array</span>, <span class="st0">'cat'</span><span class="br0">)</span>;<span class="co1">
// output: array(</span><span class="co1">
//    'cat'</span><span class="co1">
// )</span></pre></pre>

<hr>

<h3>Function: a::contains</h3>

<p>Check if the string is contained in the array</p>

<h4>Syntax</h4>

<pre><code style="display: none; ">a::contains('array', 'searchword');
</code><pre class="twilightLighter"><span class="kw4">a</span>::<span class="me1">contains</span><span class="br0">(</span><span class="st0">'array'</span>, <span class="st0">'searchword'</span><span class="br0">)</span>;</pre></pre>

<h4>Arguments</h4>

<ol>
<li>array - (array) the array</li>
<li>searchword - (string) the searchword</li>
</ol>

<h4>Returns</h4>

<ul>
<li>(boolean) true: it's inside the array, false: it's not inside</li>
</ul>

<h4>Example</h4>

<pre><code style="display: none; ">$array = array(
    'cat',
    'dog',
    'bird',
);    

if(a::contains($array, 'cat')) echo 'miao';
</code><pre class="twilightLighter"><span class="kw3">$array</span> = <span class="me1">array</span><span class="br0">(</span>
    <span class="st0">'cat'</span>,
    <span class="st0">'dog'</span>,
    <span class="st0">'bird'</span>,
<span class="br0">)</span>;    

<span class="me1">if</span><span class="br0">(</span><span class="kw4">a</span>::<span class="me1">contains</span><span class="br0">(</span><span class="kw3">$array</span>, <span class="st0">'cat'</span><span class="br0">)</span><span class="br0">)</span> <span class="kw1">echo</span> <span class="st0">'miao'</span>;</pre></pre>

<hr>

<h3>Function: a::fill</h3>

<p>Fill up an array with whatever you like</p>

<h4>Syntax</h4>

<pre><code style="display: none; ">a::fill('array', 'limit'[, 'fill']);
</code><pre class="twilightLighter"><span class="kw4">a</span>::<span class="me1">fill</span><span class="br0">(</span><span class="st0">'array'</span>, <span class="st0">'limit'</span><span class="br0">[</span>, <span class="st0">'fill'</span><span class="br0">]</span><span class="br0">)</span>;</pre></pre>

<h4>Arguments</h4>

<ol>
<li>array - (array) the array</li>
<li>limit - (int) the numer of elements which should be added to the array</li>
<li>fill - (mixed) the elements which should be added (default: 'placeholder') </li>
</ol>

<h4>Returns</h4>

<ul>
<li>(array) returns the new array</li>
</ul>

<h4>Example</h4>

<pre><code style="display: none; ">$array = array(
    'cat',
    'dog',
    'bird',
);    

$result = a::fill($array, 5, 'elephant');
// result: array(
//    'cat',
//    'dog',
//    'bird',
//    'elephant',
//    'elephant',
// );
</code><pre class="twilightLighter"><span class="kw3">$array</span> = <span class="me1">array</span><span class="br0">(</span>
    <span class="st0">'cat'</span>,
    <span class="st0">'dog'</span>,
    <span class="st0">'bird'</span>,
<span class="br0">)</span>;    

<span class="kw3">$result</span> = <span class="kw4">a</span>::<span class="me1">fill</span><span class="br0">(</span><span class="kw3">$array</span>, <span class="nu0">5</span>, <span class="st0">'elephant'</span><span class="br0">)</span>;<span class="co1">
// result: array(</span><span class="co1">
//    'cat',</span><span class="co1">
//    'dog',</span><span class="co1">
//    'bird',</span><span class="co1">
//    'elephant',</span><span class="co1">
//    'elephant',</span><span class="co1">
// );</span></pre></pre>

<hr>

<h3>Function: a::missing</h3>

<p>Check for missing elements inside an array</p>

<h4>Syntax</h4>

<pre><code style="display: none; ">a::missing('array', 'required');
</code><pre class="twilightLighter"><span class="kw4">a</span>::<span class="me1">missing</span><span class="br0">(</span><span class="st0">'array'</span>, <span class="st0">'required'</span><span class="br0">)</span>;</pre></pre>

<h4>Arguments</h4>

<ol>
<li>array - (array) the array</li>
<li>required - (array) array of required elements to search for</li>
</ol>

<h4>Returns</h4>

<ul>
<li>(array) returns either an array of missing elements</li>
</ul>

<h4>Example</h4>

<pre><code style="display: none; ">$array = array(
    'cat' =&gt; 'miao',
    'dog' =&gt; 'wuff',
    'bird' =&gt; 'tweet'
);    

$required = array('cat', 'elephant');

$missng = a::missing($array, $required);
// missing: array(
//    'elephant'
// );
</code><pre class="twilightLighter"><span class="kw3">$array</span> = <span class="me1">array</span><span class="br0">(</span>
    <span class="st0">'cat'</span> =&gt; <span class="st0">'miao'</span>,
    <span class="st0">'dog'</span> =&gt; <span class="st0">'wuff'</span>,
    <span class="st0">'bird'</span> =&gt; <span class="st0">'tweet'</span>
<span class="br0">)</span>;    

<span class="kw3">$required</span> = <span class="me1">array</span><span class="br0">(</span><span class="st0">'cat'</span>, <span class="st0">'elephant'</span><span class="br0">)</span>;

<span class="kw3">$missng</span> = <span class="kw4">a</span>::<span class="me1">missing</span><span class="br0">(</span><span class="kw3">$array</span>, <span class="kw3">$required</span><span class="br0">)</span>;<span class="co1">
// missing: array(</span><span class="co1">
//    'elephant'</span><span class="co1">
// );</span></pre></pre>

<hr>

<h3>Function: a::sort</h3>

<p>Sort an mulitdimensional array like you would sort a database table</p>

<h4>Syntax</h4>

<pre><code style="display: none; ">a::sort('array', 'params');
</code><pre class="twilightLighter"><span class="kw4">a</span>::<span class="me1">sort</span><span class="br0">(</span><span class="st0">'array'</span>, <span class="st0">'params'</span><span class="br0">)</span>;</pre></pre>

<h4>Arguments</h4>

<ol>
<li>array - (array) the array</li>
<li>params - (array) the sort parameters</li>
</ol>

<h4>Params</h4>

<p>The sort params are pretty similar to MySQL sort params:<br>
<em>fieldname ASC or fieldname DESC</em></p>

<p>You can even sort by multiple fields:<br>
<em>fieldname1 ASC, fieldname2 DESC</em></p>

<h4>Returns</h4>

<ul>
<li>(array) returns the sorted array</li>
</ul>

<h4>Example</h4>

<pre><code style="display: none; ">$array[0] = array(
    'id' =&gt; 1,
    'username' =&gt; 'bastian',
);    

$array[1] = array(
    'id' =&gt; 2,
    'username' =&gt; 'peter',
);    

$array[3] = array(
    'id' =&gt; 3,
    'username' =&gt; 'john',
);    

$sorted = a::sort($array, 'username ASC');
// Array
// (
//      [0] =&gt; Array
//          (
//              [id] =&gt; 1
//              [username] =&gt; bastian
//          )
//      [1] =&gt; Array
//          (
//              [id] =&gt; 3
//              [username] =&gt; john
//          )
//      [2] =&gt; Array
//          (
//              [id] =&gt; 2
//              [username] =&gt; peter
//          )
// )
</code><pre class="twilightLighter"><span class="kw3">$array</span><span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span> = <span class="me1">array</span><span class="br0">(</span>
    <span class="st0">'id'</span> =&gt; <span class="nu0">1</span>,
    <span class="st0">'username'</span> =&gt; <span class="st0">'bastian'</span>,
<span class="br0">)</span>;    

<span class="kw3">$array</span><span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span> = <span class="me1">array</span><span class="br0">(</span>
    <span class="st0">'id'</span> =&gt; <span class="nu0">2</span>,
    <span class="st0">'username'</span> =&gt; <span class="st0">'peter'</span>,
<span class="br0">)</span>;    

<span class="kw3">$array</span><span class="br0">[</span><span class="nu0">3</span><span class="br0">]</span> = <span class="me1">array</span><span class="br0">(</span>
    <span class="st0">'id'</span> =&gt; <span class="nu0">3</span>,
    <span class="st0">'username'</span> =&gt; <span class="st0">'john'</span>,
<span class="br0">)</span>;    

<span class="kw3">$sorted</span> = <span class="kw4">a</span>::<span class="me1">sort</span><span class="br0">(</span><span class="kw3">$array</span>, <span class="st0">'username ASC'</span><span class="br0">)</span>;<span class="co1">
// Array</span><span class="co1">
// (</span><span class="co1">
//      [0] =&gt; Array</span><span class="co1">
//          (</span><span class="co1">
//              [id] =&gt; 1</span><span class="co1">
//              [username] =&gt; bastian</span><span class="co1">
//          )</span><span class="co1">
//      [1] =&gt; Array</span><span class="co1">
//          (</span><span class="co1">
//              [id] =&gt; 3</span><span class="co1">
//              [username] =&gt; john</span><span class="co1">
//          )</span><span class="co1">
//      [2] =&gt; Array</span><span class="co1">
//          (</span><span class="co1">
//              [id] =&gt; 2</span><span class="co1">
//              [username] =&gt; peter</span><span class="co1">
//          )</span><span class="co1">
// )</span></pre></pre>
</div>  </div>

  <div id="footer">
    © 2010 –&nbsp;<a href="http://bastian-allgeier.de/">Bastian Allgeier</a>
    <ul>
      <li><a href="http://twitter.com/getkirby">Follow Kirby on Twitter</a></li>
    </ul>
  </div>

</div>

<script type="text/javascript" src="./array_files/mootools.js"></script>
<script type="text/javascript" src="./array_files/Lighter.js"></script>
<script type="text/javascript" src="./array_files/Fuel.js"></script>
<script type="text/javascript" src="./array_files/scripts.js"></script>

<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script><script src="./array_files/ga.js" type="text/javascript"></script>
<script type="text/javascript">
try {
var pageTracker = _gat._getTracker("UA-431401-11");
pageTracker._trackPageview();
} catch(err) {}</script>




</body></html>