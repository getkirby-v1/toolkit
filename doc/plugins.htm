<!DOCTYPE html>
<html>
<head>

<title>Kirby</title>

<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="description" content="Kirby is a super simple, designy PHP toolkit" />
<meta name="keywords" content="php, toolkit, jquery, simple, design" />
<meta name="author" content="Bastian Allgeier" />
<meta http-equiv="imagetoolbar" content="no" />

<link rel="shortcut icon" href="/favicon.ico" />

<link rel="stylesheet" href="/css/styles.css" media="all" type="text/css" />

</head>

<body>

<div id="page">

  <div id="menu">
  
    <ul>
            <li><a href="/home.htm">kirby</a></li>
            <li><a href="/docs.htm">docs</a></li>
            <li><a href="/download">download</a></li>
            <li><a class="active" href="/plugins.htm">plugins</a></li>
          </ul>
  
  </div>
  
  <div id="content" class="plugins">
  
<h1>Plugins</h1>

<p>
	While the core of Kirby should stay as clean and simple as possible there's a lot of room for plugins. 
	I will release some of which I've already built within the next weeks. Please feel free to build your
	own and add them on <a href="http://github.com/bastianallgeier/kirby">Github</a>
</p>

<h2>Remote</h2>

<p>Remote is the a Plugin, which makes it easy to handle remote get and post requests.</p>

<pre><code>&lt;?php

require_once('kirby.php');
require_once('plugins/remote.php');

$data = remote::get('http://api.twitter.com/1/statuses/show/bastianallgeier.json', 'json');

a::show($data);

?&gt;</code></pre>

<p>
	This is all you've got to do to get the latest Tweets from the Twitter API, for example. Remote can automatically
	parse the response (here it will parse the json) and return a nice and pretty PHP array. There's a lot more remote
	can do for you, so stay tuned for more docs or dive into the code.
</p>

<h2>Template</h2>

<p>This is probably the tiniest template engine ever. It is very easy to use and yet powerfull enough for bigger projects.</p>

<pre><code>&lt;?php

require_once('kirby.php');
require_once('plugins/template.php');

// fill the template
tpl::set('title', 'Some random Site title');
tpl::set('body', 'Great site, bla, bla, bla');

// load the default template
tpl::load('blog');

?&gt;</code></pre>

<p>
Just add a template folder to the same directory where your kirby core file stays and add 
your template files there. All template files are normal php files:
</p>
<pre><code>&lt;!-- this is your templates/blog.php template file --&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;&lt;?php echo $title ?&gt;&lt;/title&gt;
  &lt;/head&gt;
  
  &lt;body&gt;
  &lt;?php echo $body ?&gt;
  &lt;/body&gt;
&lt;/html&gt;</code></pre>

<p>You can even use tpl::load() inside template files to add common code snippets:</p>
<pre><code>&lt;!-- this is your templates/blog.php template file --&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;&lt;?php echo $title ?&gt;&lt;/title&gt;
  &lt;/head&gt;
  
  &lt;body&gt;
  &lt;?php echo tpl::load('menu') ?&gt;
  &lt;?php echo $body ?&gt;
  &lt;/body&gt;
&lt;/html&gt;</code></pre>


<h2>Timer</h2>

<p>Include the timer to do some raw benchmarking of your code.</p>

<pre><code>&lt;?php

require_once('kirby.php');
require_once('plugins/timer.php');

// some code

echo timer::get();
// sample output: 0.123412 

// start a new timer
timer::set('another_timer');

// some more code

echo timer::get('another_timer');
// sample output : 1.21231

?&gt;</code></pre>

<p>
	You can start as many timers as you like and get them back later. A global timer is started when you include
	the plugin, which will be returned when you don't specify a key i.e: echo timer::get();
</p>


<h2>Upload</h2>

<p>
	Handling file uploads is always a pain in the ass. This plugin tries to make it as joyful as possible. 
	All you need to do is to set the name of the file field and the destination, where the file should be stored.
</p>

<pre><code>&lt;?php

require_once('kirby.php');
require_once('plugins/upload.php');

if(get('submit')) {
  upload::file('file-upload', 'files/upload.jpg');
}

?&gt;
&lt;form action=&quot;&quot; enctype=&quot;multipart/form-data&quot; method=&quot;post&quot;&gt;
&lt;input type=&quot;file&quot; name=&quot;file-upload&quot; /&gt;
&lt;input type=&quot;submit&quot; name=&quot;submit&quot; /&gt;
&lt;/form&gt;</code></pre>

<p>
	There are a lot of ways to customize the upload. Please stay tuned for the documentation.
</p>


<h2>Pager</h2>

<p>
	The pager plugin helps to page through a larger number of entries. Just enter the number of entries,
	the current page and the limit of entries, which will be shown and all the calculation is done for you.
	Additionally the pager sanitizes user input, so if you enter a invalid page number the nearest possible page
	will be returned instead.
</p>

<pre><code>&lt;?php

require_once('kirby.php');
require_once('plugins/pager.php');

$entries = 100;
$page    = 2;
$limit   = 20;

pager::set($entries, $page, $limit);

echo pager::get();
// output: 2

echo pager::next();
// output: 3

echo pager::previous();
// output: 1

echo pager::last();
// output: 5

echo pager::first();
// output: 1

echo pager::db();
// output: 20 (returns a valid page number for SQL queries)

?&gt;</code></pre>

<h2>Crypt</h2>

<p>
	<a href="http://oelna.de">Arno</a> has built a great crypt plugin, which helps to encode and decode strings.
	This requires mcrypt.
</p>

<pre><code>&lt;?php

require_once('kirby.php');
require_once('plugins/crypt.php');

$key = '12345';
$secret_text = 'supersecretpassword';
$encrypted_text = crypt::encode($secret_text, $key);

// later

echo crypt::decode($encrypted_text, $key);
// output: 'supersecretpassword'

?&gt;</code></pre>  </div>

  <div id="footer">
    &copy; 2010 – <a href="http://bastian-allgeier.de">Bastian Allgeier</a>
    <ul>
      <li><a href="http://twitter.com/getkirby">Follow Kirby on Twitter</a></li>
    </ul>
  </div>

</div>

<script type="text/javascript" src="/js/mootools.js"></script>
<script type="text/javascript" src="/lighter/Lighter.js"></script>
<script type="text/javascript" src="/lighter/Fuel.js"></script>
<script type="text/javascript" src="/js/scripts.js"></script>

<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
try {
var pageTracker = _gat._getTracker("UA-431401-11");
pageTracker._trackPageview();
} catch(err) {}</script>

</body>

</html>
