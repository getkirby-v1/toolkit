<!DOCTYPE html>
<!-- saved from url=(0032)http://getkirby.com/docs/request -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<title>Kirby</title>


<meta name="description" content="Kirby is a super simple, designy PHP toolkit">
<meta name="keywords" content="php, toolkit, jquery, simple, design">
<meta name="author" content="Bastian Allgeier">
<meta http-equiv="imagetoolbar" content="no">

<link rel="shortcut icon" href="http://getkirby.com/favicon.ico">

<link rel="stylesheet" href="./request_files/styles.css" media="all" type="text/css">

<link rel="stylesheet" type="text/css" media="screen" href="./request_files/Flame.twilight.css"><script src="./request_files/Fuel.php.js" type="text/javascript"></script></head>

<body>

<div id="page">

  <div id="menu">
  
    <ul>
            <li><a href="http://getkirby.com/home">kirby</a></li>
            <li><a class="active" href="http://getkirby.com/docs">docs</a></li>
            <li><a href="http://getkirby.com/download">download</a></li>
            <li><a href="http://getkirby.com/plugins">plugins</a></li>
          </ul>
  
  </div>
  
  <div id="content" class="docs">
  <h1>Documentation</h1>


<ul id="docsmenu">
    <li><a href="http://getkirby.com/docs/array">array</a></li>
      <li><a href="http://getkirby.com/docs/browser">browser</a></li>
      <li><a href="http://getkirby.com/docs/config">config</a></li>
      <li><a href="http://getkirby.com/docs/content">content</a></li>
      <li><a href="http://getkirby.com/docs/cookie">cookie</a></li>
      <li><a href="http://getkirby.com/docs/core">core</a></li>
      <li><a href="http://getkirby.com/docs/database">database</a></li>
      <li><a href="http://getkirby.com/docs/dir">dir</a></li>
      <li><a href="http://getkirby.com/docs/file">file</a></li>
      <li><a href="http://getkirby.com/docs/globals">globals</a></li>
      <li><a href="http://getkirby.com/docs/helper">helper</a></li>
      <li><a href="http://getkirby.com/docs/language">language</a></li>
      <li><a class="active" href="./request_files/request.htm">request</a></li>
      <li><a href="http://getkirby.com/docs/server">server</a></li>
      <li><a href="http://getkirby.com/docs/session">session</a></li>
      <li><a href="http://getkirby.com/docs/size">size</a></li>
      <li><a href="http://getkirby.com/docs/string">string</a></li>
      <li><a href="http://getkirby.com/docs/url">url</a></li>
      <li><a href="http://getkirby.com/docs/validation">validation</a></li>
      <li><a href="http://getkirby.com/docs/xml">xml</a></li>
  </ul>

<div id="documentation">
<h2>R (Request)</h2>

<p>The r class helps to handle post and get requests</p>

<h3>Function: r::set</h3>

<p>Adds stuff to the request</p>

<h4>Syntax</h4>

<pre><code style="display: none; ">r::set('key', 'value');
</code><pre class="twilightLighter"><span class="kw4">r</span>::<span class="me1">set</span><span class="br0">(</span><span class="st0">'key'</span>, <span class="st0">'value'</span><span class="br0">)</span>;</pre></pre>

<h4>Arguments</h4>

<ol>
<li>key - (string) </li>
<li>value - (mixed) the value can be pretty much anything</li>
</ol>

<h4>Returns</h4>

<ul>
<li>(void)</li>
</ul>

<h4>Example</h4>

<pre><code style="display: none; ">r::set('username', 'bastian');

a::show($_REQUEST);

// sample output: array(
//    'username' =&gt; 'bastian'
//    ... other stuff from the request
// );
</code><pre class="twilightLighter"><span class="kw4">r</span>::<span class="me1">set</span><span class="br0">(</span><span class="st0">'username'</span>, <span class="st0">'bastian'</span><span class="br0">)</span>;

<span class="kw4">a</span>::<span class="me1">show</span><span class="br0">(</span><span class="kw3">$_REQUEST</span><span class="br0">)</span>;
<span class="co1">
// sample output: array(</span><span class="co1">
//    'username' =&gt; 'bastian'</span><span class="co1">
//    ... other stuff from the request</span><span class="co1">
// );</span></pre></pre>

<hr>

<h3>Function: r::get</h3>

<p>Get any value from the request</p>

<h4>Syntax</h4>

<pre><code style="display: none; ">r::get('key'[, 'default']);
</code><pre class="twilightLighter"><span class="kw4">r</span>::<span class="me1">get</span><span class="br0">(</span><span class="st0">'key'</span><span class="br0">[</span>, <span class="st0">'default'</span><span class="br0">]</span><span class="br0">)</span>;</pre></pre>

<h4>Arguments</h4>

<ol>
<li>key - (string) </li>
<li>default - (mixed) set a default value if the result is empty</li>
</ol>

<h4>Returns</h4>

<ul>
<li>(mixed) returns whatever has been stored with this key</li>
</ul>

<h4>Shortcut</h4>

<p>The shortcut for this function is get()</p>

<h4>Example</h4>

<pre><code style="display: none; ">echo r::get('username');
// sample output 'bastian'

echo r::get('username', 'peter');
// if no username is found in the request peter will be echoed

echo get('username');
// shortcut
</code><pre class="twilightLighter"><span class="kw1">echo</span> <span class="kw4">r</span>::<span class="me1">get</span><span class="br0">(</span><span class="st0">'username'</span><span class="br0">)</span>;<span class="co1">
// sample output 'bastian'</span>

<span class="kw1">echo</span> <span class="kw4">r</span>::<span class="me1">get</span><span class="br0">(</span><span class="st0">'username'</span>, <span class="st0">'peter'</span><span class="br0">)</span>;<span class="co1">
// if no username is found in the request peter will be echoed</span>

<span class="kw1">echo</span> <span class="me1">get</span><span class="br0">(</span><span class="st0">'username'</span><span class="br0">)</span>;<span class="co1">
// shortcut</span></pre></pre>

<hr>

<h3>Function: r::parse</h3>

<p>Parse and sanitize the whole request</p>

<h4>Syntax</h4>

<pre><code style="display: none; ">r::parse(['param1'[,'param2'[,'param3']]] etc...);
</code><pre class="twilightLighter"><span class="kw4">r</span>::<span class="me1">parse</span><span class="br0">(</span><span class="br0">[</span><span class="st0">'param1'</span><span class="br0">[</span>,<span class="st0">'param2'</span><span class="br0">[</span>,<span class="st0">'param3'</span><span class="br0">]</span><span class="br0">]</span><span class="br0">]</span> <span class="kw4">etc</span>...<span class="br0">)</span>;</pre></pre>

<h4>Arguments</h4>

<ol>
<li>a comma sperarated list of params: params1, params2, params3</li>
</ol>

<h4>Params</h4>

<p>Add all the fields you wanna get from the request in the following way:<br>
<em>field:type:default</em> (type and default are optional)</p>

<p>list of supported types:</p>

<ul>
<li>int</li>
<li>str</li>
<li>array</li>
<li>nohtml</li>
<li>noxml</li>
<li>enum</li>
<li>checkbox</li>
<li>url</li>
<li>email</li>
<li>plain</li>
<li>lower</li>
<li>upper</li>
<li>words     </li>
<li>tags  </li>
<li>nobreaks</li>
<li>url</li>
<li>filename</li>
</ul>

<h4>Returns</h4>

<ul>
<li>(array) returns the sanitized array with exactly the fields you've specified above</li>
</ul>

<h4>Example</h4>

<pre><code style="display: none; ">$data = r::parse(
    'id:int:1',
    'active:enum:n',
    'username:str',
    'email:email',
    'bio:nohtml'
);

// sample result: array(
//    'id' =&gt; 211,
//    'active' =&gt; 'y',
//    'username' =&gt; 'bastian',
//    'email' =&gt; 'mail@bastian-allgeier.de',
//    'bio' =&gt; 'some super exciting bio'
// );
</code><pre class="twilightLighter"><span class="kw3">$data</span> = <span class="kw4">r</span>::<span class="me1">parse</span><span class="br0">(</span>
    <span class="st0">'id:int:1'</span>,
    <span class="st0">'active:enum:n'</span>,
    <span class="st0">'username:str'</span>,
    <span class="st0">'email:email'</span>,
    <span class="st0">'bio:nohtml'</span>
<span class="br0">)</span>;
<span class="co1">
// sample result: array(</span><span class="co1">
//    'id' =&gt; 211,</span><span class="co1">
//    'active' =&gt; 'y',</span><span class="co1">
//    'username' =&gt; 'bastian',</span><span class="co1">
//    'email' =&gt; 'mail@bastian-allgeier.de',</span><span class="co1">
//    'bio' =&gt; 'some super exciting bio'</span><span class="co1">
// );</span></pre></pre>

<hr>

<h3>Function: r::ajax</h3>

<p>Checks whether the request has been made via ajax</p>

<h4>Syntax</h4>

<pre><code style="display: none; ">r::ajax();
</code><pre class="twilightLighter"><span class="kw4">r</span>::<span class="me1">ajax</span><span class="br0">(</span><span class="br0">)</span>;</pre></pre>

<h4>Returns</h4>

<ul>
<li>(boolean) true: yes, that was ajax - false: boring old fashioned request</li>
</ul>

<h4>Example</h4>

<pre><code style="display: none; ">if(r::ajax()) echo 'ajax rulez';
</code><pre class="twilightLighter"><span class="me1">if</span><span class="br0">(</span><span class="kw4">r</span>::<span class="me1">ajax</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span> <span class="kw1">echo</span> <span class="st0">'ajax rulez'</span>;</pre></pre>

<hr>

<h3>Function: r::referer</h3>

<p>Get the referer for this request</p>

<h4>Syntax</h4>

<pre><code style="display: none; ">r::referer(['default_url']);
</code><pre class="twilightLighter"><span class="kw4">r</span>::<span class="me1">referer</span><span class="br0">(</span><span class="br0">[</span><span class="st0">'default_url'</span><span class="br0">]</span><span class="br0">)</span>;</pre></pre>

<h4>Arguments</h4>

<ol>
<li>default_url - (string) you can define a default url here, which should be returned when there's no referer</li>
</ol>

<h4>Returns</h4>

<ul>
<li>(string) returns the url</li>
</ul>

<h4>Example</h4>

<pre><code style="display: none; ">echo r::referer();
// sample result: http://someurl.com    
</code><pre class="twilightLighter"><span class="kw1">echo</span> <span class="kw4">r</span>::<span class="me1">referer</span><span class="br0">(</span><span class="br0">)</span>;<span class="co1">
// sample result: http://someurl.com    </span></pre></pre>
</div>  </div>

  <div id="footer">
    © 2010 –&nbsp;<a href="http://bastian-allgeier.de/">Bastian Allgeier</a>
    <ul>
      <li><a href="http://twitter.com/getkirby">Follow Kirby on Twitter</a></li>
    </ul>
  </div>

</div>

<script type="text/javascript" src="./request_files/mootools.js"></script>
<script type="text/javascript" src="./request_files/Lighter.js"></script>
<script type="text/javascript" src="./request_files/Fuel.js"></script>
<script type="text/javascript" src="./request_files/scripts.js"></script>

<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script><script src="./request_files/ga.js" type="text/javascript"></script>
<script type="text/javascript">
try {
var pageTracker = _gat._getTracker("UA-431401-11");
pageTracker._trackPageview();
} catch(err) {}</script>




</body></html>